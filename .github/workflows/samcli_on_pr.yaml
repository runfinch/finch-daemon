name: samcli-pr-validation

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli_on_pr.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.8'
  CONTAINERD_VERSION: "1.7.27"

permissions:
  id-token: write
  contents: read

jobs:
  samcli-minimal-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Much shorter than full suite
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      BY_CANARY: true
      SAM_CLI_DEV: 1
      SAM_CLI_TELEMETRY: 0
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: samcli-pr-validation
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 3600  # Shorter duration for PR tests

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10

      - name: Build and start finch-daemon
        run: |
          make build
          sudo bin/finch-daemon --debug --socket-owner $UID 2>&1 | tee finch-daemon.log &
          sleep 10

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)  # Latest tag
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Create minimal test suite
        run: |
          cat > samcli_minimal_tests.txt << 'EOF'
          # Minimal SAM CLI integration tests for finch-daemon PR validation
          # Tests core Docker API operations that SAM CLI depends on
          # Expected runtime: 5-15 minutes

          # 1. Container Lifecycle (create → start → stop → remove)
          # Tests: docker.from_env(), containers.create(), container.start(), volume mounting
          tests/integration/local/invoke/test_integrations_cli.py::TestSamPythonHelloWorldIntegration::test_invoke_returncode_is_zero

          # 2. Long-running Containers + Port Binding  
          # Tests: Long-lived containers, port binding, HTTP requests
          tests/integration/local/start_api/test_start_api.py::TestSamStartApi::test_static_directory

          # 3. Concurrent Container Access
          # Tests: Multiple containers, concurrent requests, container management
          tests/integration/local/start_lambda/test_start_lambda.py::TestParallelRequests::test_same_endpoint

          # 4. Log Streaming
          # Tests: container.attach(), real-time log streaming
          tests/integration/local/invoke/test_integrations_cli.py::TestSamPythonHelloWorldIntegration::test_invoke_with_stdout_stderr_logs

          # 5. Docker Networking
          # Tests: Docker network operations, host networking mode
          tests/integration/local/invoke/test_integrations_cli.py::TestSamPythonHelloWorldIntegration::test_invoke_with_docker_network_of_host
          EOF

      - name: Run minimal SAM CLI integration tests
        working-directory: aws-sam-cli
        timeout-minutes: 20
        run: |
          echo "=== MINIMAL SAM CLI TESTS - Started at $(date) ==="
          echo "Testing core Docker API compatibility with finch-daemon"
          
          # Set ulimit for file handles
          ulimit -n 65536
          
          # Run the minimal test suite
          python -m pytest \
            --tb=short \
            -v \
            --maxfail=3 \
            $(cat ../samcli_minimal_tests.txt | grep -v '^#' | grep -v '^$') \
            > minimal_test_output.txt 2>&1 || true

          echo "=== MINIMAL TEST OUTPUT ==="
          cat minimal_test_output.txt
          echo "=== END MINIMAL TEST OUTPUT ==="

          # Check if any tests failed
          if grep -q "FAILED" minimal_test_output.txt; then
            echo "❌ Minimal tests failed - finch-daemon Docker API compatibility issue detected"
            echo "Failed tests:"
            grep "FAILED" minimal_test_output.txt
            
            echo ""
            echo "=== FINCH-DAEMON LOGS ==="
            tail -50 ../finch-daemon.log
            
            exit 1
          else
            echo "✅ All minimal tests passed - finch-daemon Docker API compatibility confirmed"
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" minimal_test_output.txt | tail -1 || echo "No pytest summary found"

      - name: Show finch-daemon logs
        if: always()
        run: |
          echo "=== FINCH-DAEMON LOGS ==="
          cat finch-daemon.log || echo "No log file found"

      - name: Cleanup test resources
        if: always()
        timeout-minutes: 5
        run: |
          echo "=== Cleaning up test resources ==="
          
          # Set error handling to continue on failures
          set +e
          
          # Clean up any test stacks that might have been created
          TEST_STACKS=$(aws cloudformation list-stacks --region $AWS_DEFAULT_REGION --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query "StackSummaries[?contains(StackName, 'sam-app') || contains(StackName, 'test-')].[StackName]" --output text 2>/dev/null || true)
          
          if [ -n "$TEST_STACKS" ]; then
            for stack in $TEST_STACKS; do
              echo "Cleaning up test stack: $stack"
              aws cloudformation delete-stack --stack-name "$stack" --region $AWS_DEFAULT_REGION || true
            done
          fi
          
          # Clean up any test Lambda functions
          TEST_FUNCTIONS=$(aws lambda list-functions --region $AWS_DEFAULT_REGION --query "Functions[?contains(FunctionName, 'HelloWorld') || contains(FunctionName, 'test-')].FunctionName" --output text 2>/dev/null || true)
          
          if [ -n "$TEST_FUNCTIONS" ]; then
            for func in $TEST_FUNCTIONS; do
              echo "Cleaning up test function: $func"
              aws lambda delete-function --function-name "$func" --region $AWS_DEFAULT_REGION || true
            done
          fi
          
          echo "✅ Cleanup completed"
