name: samcli

on:
  push:
    branches:
      - main
      - samcli-test
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  # schedule:
  #   - cron: '0 2 * * *'  # Run daily at 2 AM UTC
  workflow_dispatch:

env:
  GO_VERSION: '1.23.8'
  CONTAINERD_VERSION: "1.7.27"

permissions:
  id-token: write
  contents: read

jobs:
  samcli-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      BY_CANARY: true  # full aws access for tests
      SAM_CLI_DEV: 1
      SAM_CLI_TELEMETRY: 0
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: samcli-sequential-tests
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 14400

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10

      - name: Build and start finch-daemon
        run: |
          make build
          sudo bin/finch-daemon --debug --socket-owner $UID 2>&1 | tee finch-daemon.log &
          sleep 10

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)  # Latest tag
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Run unit tests
        working-directory: aws-sam-cli
        run: |
          echo "=== UNIT TESTS - Started at $(date) ==="

          # Fix common issues from test guide
          ulimit -n 8192  # Fix "too many open files"

          # Clean up potentially problematic Docker config entries
          if [ -f ~/.docker/config.json ]; then
            if command -v jq >/dev/null 2>&1; then
              jq 'del(.credsStore)' ~/.docker/config.json > ~/.docker/config.json.tmp && mv ~/.docker/config.json.tmp ~/.docker/config.json
            else
              sed -i '/"credsStore"/d' ~/.docker/config.json
            fi
          fi

          make test | tee unit_test_output.txt

          # Check coverage (should be ~94%)
          COVERAGE=$(grep -o "[0-9]\+%" unit_test_output.txt | head -1 | tr -d '%')
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" -lt 90 ]; then
            echo "❌ Coverage below threshold! Got: $COVERAGE%, Expected: ~94%"
            exit 1
          else
            echo "✅ Unit tests passed with $COVERAGE% coverage"
          fi

      - name: Run invoke tests
        working-directory: aws-sam-cli
        timeout-minutes: 20
        run: |
          echo "=== INVOKE TESTS - Started at $(date) ==="
          python -m pytest tests/integration/local/invoke -k 'not Terraform' -v --tb=short > invoke_output.txt 2>&1 || true

          # echo "=== INVOKE TEST OUTPUT ==="
          # cat invoke_output.txt
          # echo "=== END INVOKE TEST OUTPUT ==="

          # Expected failures from test guide (12 total from different test classes)
          cat > expected_invoke_failures.txt << 'EOF'
          test_invoke_with_error_during_image_build
          test_invoke_with_timeout_set_0_TimeoutFunction
          test_invoke_with_timeout_set_1_TimeoutFunctionWithParameter
          test_invoke_with_timeout_set_2_TimeoutFunctionWithStringParameter
          test_building_new_rapid_image_removes_old_rapid_images
          test_invoke_returns_expected_results_from_git_function
          test_invoke_returns_expected_results_from_git_function_with_parameters
          EOF

          # Extract actual failures
          grep "FAILED" invoke_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_invoke_failures.txt || true

          # Find unexpected failures
          UNEXPECTED=$(grep -v -f expected_invoke_failures.txt actual_invoke_failures.txt 2>/dev/null || true)

          if [ -n "$UNEXPECTED" ]; then
            echo "❌ Unexpected failures found:"
            echo "$UNEXPECTED"
            exit 1
          else
            echo "✅ All failures were expected."
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" invoke_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Run start-lambda tests
        working-directory: aws-sam-cli
        timeout-minutes: 10
        run: |
          echo "=== START-LAMBDA TESTS - Started at $(date) ==="
          python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v --tb=short > start_lambda_output.txt 2>&1 || true

          # echo "=== START-LAMBDA TEST OUTPUT ==="
          # cat start_lambda_output.txt
          # echo "=== END START-LAMBDA TEST OUTPUT ==="

          # Should pass completely per test guide
          if grep -q "FAILED" start_lambda_output.txt; then
            echo "❌ Start-lambda tests failed (should pass completely)"
            grep "FAILED" start_lambda_output.txt
            exit 1
          else
            echo "✅ All start-lambda tests passed as expected"
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" start_lambda_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Run start-api tests
        working-directory: aws-sam-cli
        timeout-minutes: 30
        run: |
          echo "=== START-API TESTS - Started at $(date) ==="
          ulimit -a
          ulimit -n 8192
          python -m pytest tests/integration/local/start_api -k 'not Terraform' -v --tb=short > start_api_output.txt 2>&1 || true

          # echo "=== START-API TEST OUTPUT ==="
          # cat start_api_output.txt
          # echo "=== END START-API TEST OUTPUT ==="

          # Should pass completely per test guide
          if grep -q "FAILED" start_api_output.txt; then
            echo "❌ Start-api tests failed (should pass completely)"
            grep "FAILED" start_api_output.txt
            exit 1
          else
            echo "✅ All start-api tests passed as expected"
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" start_api_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Run sync tests
        working-directory: aws-sam-cli
        timeout-minutes: 20
        run: |
          echo "=== SYNC TESTS - Started at $(date) ==="
          python -m pytest tests/integration/sync -k 'image' -v --tb=short > sync_output.txt 2>&1 || true

          # echo "=== SYNC TEST OUTPUT ==="
          # cat sync_output.txt
          # echo "=== END SYNC TEST OUTPUT ==="

          # Should pass completely per test guide
          if grep -q "FAILED" sync_output.txt; then
            echo "❌ Sync tests failed (should pass completely)"
            grep "FAILED" sync_output.txt
            exit 1
          else
            echo "✅ All sync tests passed as expected"
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" sync_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true


      - name: Run package tests
        working-directory: aws-sam-cli
        timeout-minutes: 5
        run: |
          echo "=== PACKAGE TESTS - Started at $(date) ==="
          python -m pytest tests/integration/package/test_package_command_image.py -v --tb=short > package_output.txt 2>&1 || true

          # echo "=== PACKAGE TEST OUTPUT ==="
          # cat package_output.txt
          # echo "=== END PACKAGE TEST OUTPUT ==="

          # Expected failures from test guide
          cat > expected_package_failures.txt << 'EOF'
          test_package_with_deep_nested_template_image
          test_package_template_with_image_repositories_nested_stack
          test_package_with_loadable_image_archive_0_template_image_load_yaml
          EOF

          # Extract actual failures
          grep "FAILED" package_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_package_failures.txt || true

          # Also check for nested stack failures (pattern match)
          grep "FAILED.*test_package_template_with_image_repositories_nested_stack" package_output.txt >> actual_package_failures.txt || true

          # Find unexpected failures (exclude nested stack pattern)
          UNEXPECTED=$(grep -v -f expected_package_failures.txt actual_package_failures.txt | grep -v "test_package_template_with_image_repositories_nested_stack" || true)

          if [ -n "$UNEXPECTED" ]; then
            echo "❌ Unexpected failures found:"
            echo "$UNEXPECTED"
            exit 1
          else
            echo "✅ All failures were expected."
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" package_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Run deploy tests
        working-directory: aws-sam-cli
        timeout-minutes: 45
        run: |
          echo "=== DEPLOY TESTS - Started at $(date) ==="
          python -m pytest tests/integration/deploy -k 'image' -v --tb=short > deploy_output.txt 2>&1 || true

          # echo "=== DEPLOY TEST OUTPUT ==="
          # cat deploy_output.txt
          # echo "=== END DEPLOY TEST OUTPUT ==="

          # Expected passes - this test passes despite having an error in the output
          cat > expected_deploy_passes.txt << 'EOF'
          test_deploy_directly_from_image_archive_but_error_fail_0_template_image_load_fail_yaml
          EOF

          # Extract actual passes
          grep "PASSED" deploy_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_deploy_passes.txt || true

          # Find unexpected passes (passes that aren't in our expected list)
          UNEXPECTED_PASSES=$(grep -v -f expected_deploy_passes.txt actual_deploy_passes.txt 2>/dev/null || true)

          if [ -n "$UNEXPECTED_PASSES" ]; then
            echo "❌ Unexpected passes found:"
            echo "$UNEXPECTED_PASSES"
            exit 1
          else
            echo "✅ All failures and passes were expected (1 known pass with error, rest fail due to multi-arch)."
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" deploy_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Run build tests
        working-directory: aws-sam-cli
        run: |
          echo "=== BUILD TESTS - Started at $(date) ==="
          python -m pytest tests/integration/buildcmd -k '(container or image) and not sar and not terraform' -v --tb=short > build_output.txt 2>&1 || true

          # echo "=== BUILD TEST OUTPUT ==="
          # cat build_output.txt
          # echo "=== END BUILD TEST OUTPUT ==="

          # Expected failures from test guide (nerdctl ancestor filter limitation)
          cat > expected_build_failures.txt << 'EOF'
          test_with_invalid_dockerfile_definition
          test_with_invalid_dockerfile_location
          test_load_success
          test_building_ruby_3_2_1_use_container
          test_with_makefile_builder_specified_python_runtime_1_use_container
          test_with_native_builder_specified_python_runtime_1_use_container
          test_inline_not_built_1_use_container
          test_json_env_vars_passed_0_use_container
          test_json_env_vars_passed_1_use_container
          test_inline_env_vars_passed_0_use_container
          test_inline_env_vars_passed_1_use_container
          test_custom_build_image_succeeds_0_use_container
          test_custom_build_image_succeeds_1_use_container
          test_building_ruby_in_container_with_specified_architecture_0_ruby3_2
          test_building_java_in_container_with_arm64_architecture_00_java8_al2
          test_building_java_in_container_with_arm64_architecture_03_java8_al2
          test_building_java_in_container_with_arm64_architecture_04_java11
          test_building_java_in_container_with_arm64_architecture_07_java11
          test_building_java_in_container_with_arm64_architecture_08_java17
          test_building_java_in_container_with_arm64_architecture_11_java17
          test_building_java_in_container_with_arm64_architecture_al2023_0_java21
          test_building_java_in_container_with_arm64_architecture_al2023_1_java21
          test_building_java_in_container_with_arm64_architecture_al2023_2_java21
          test_building_java_in_container_with_arm64_architecture_al2023_3_java21
          test_building_java_in_container_00_java8_al2
          EOF

          # Extract actual failures
          grep "FAILED" build_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_build_failures.txt || true

          # Find unexpected failures
          UNEXPECTED=$(grep -v -f expected_build_failures.txt actual_build_failures.txt 2>/dev/null || true)

          if [ -n "$UNEXPECTED" ]; then
            echo "❌ Unexpected failures found:"
            echo "$UNEXPECTED"
            exit 1
          else
            echo "✅ All failures were expected."
          fi

          echo ""
          echo "=== PYTEST SUMMARY ==="
          grep -E "=+ .*(failed|passed|skipped|deselected).* =+$" build_output.txt | tail -1 || echo "No pytest summary found"
        continue-on-error: true

      - name: Show finch-daemon logs
        if: always()
        run: |
          echo "=== FINCH-DAEMON OUTPUT ==="
          cat finch-daemon.log || echo "No log file found"

      - name: AWS resource cleanup
        if: always()
        run: |
          echo "=== Final cleanup ==="
          # Clean up any remaining SAM managed stack
          STACK_NAME="aws-sam-cli-managed-default"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION --query 'Stacks[0].StackStatus' --output text)
            echo "Found existing stack with status: $STACK_STATUS"

            # Get the S3 bucket name from stack outputs
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION --query 'Stacks[0].Outputs[?OutputKey==`SourceBucket`].OutputValue' --output text 2>/dev/null || echo "")

            if [ -n "$BUCKET_NAME" ]; then
              echo "Found S3 bucket: $BUCKET_NAME"
              echo "Emptying S3 bucket before stack deletion..."

              # Delete all object versions and delete markers
              aws s3api list-object-versions --bucket "$BUCKET_NAME" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
                if [ -n "$key" ] && [ -n "$version" ]; then
                  aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version" || true
                fi
              done

              # Delete any delete markers
              aws s3api list-object-versions --bucket "$BUCKET_NAME" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
                if [ -n "$key" ] && [ -n "$version" ]; then
                  aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version" || true
                fi
              done

              echo "S3 bucket emptied successfully"
            else
              echo "No S3 bucket found in stack outputs"
            fi

            # Delete stack
            echo "Deleting SAM managed stack..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION

            # Wait for deletion to complete
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || true
            echo "✅ Stack deletion completed"
          else
            echo "No existing SAM managed stack found"
          fi
          echo "Cleanup completed"
