name: samcli

on:
  push:
    branches:
      - main
      - samcli-test
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.8'
  CONTAINERD_VERSION: "1.7.27"

permissions:
  id-token: write
  contents: read

jobs:
  samcli-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 240
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      BY_CANARY: true  # full aws access for tests
      SAM_CLI_DEV: 1 
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: samcli-sequential-tests
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 14400

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10

      - name: Build and start finch-daemon
        run: |
          make build
          sudo bin/finch-daemon --debug --socket-owner $UID 2>&1 | tee finch-daemon.log &          
          sleep 10
          curl --unix-socket /run/finch.sock -X GET http:/v1.43/version

      - name: Configure permissions
        run: |
          sudo chmod 755 /run/buildkit/
          echo "Directory permissions fixed"
          ls -ld /run/buildkit/

          if [ -S /run/buildkit/buildkitd.sock ]; then
            sudo chmod 666 /run/buildkit/buildkitd.sock
            echo "Socket permissions fixed"
            ls -la /run/buildkit/buildkitd.sock
          else
            echo "Socket still doesn't exist - BuildKit might be failing to create it"
          fi

      - name: Debug containerd namespaces and connectivity
        run: |
          echo "=== CONTAINERD NAMESPACE DEBUG ==="
          echo "Available namespaces in containerd:"
          sudo ctr namespace list || echo "Could not list namespaces"
          echo ""

          echo "=== BUILDKIT WORKER INFO ==="
          echo "BuildKit workers and their configuration:"
          /usr/local/bin/buildctl --addr=unix:///run/buildkit/buildkitd.sock debug workers || echo "Could not get BuildKit worker info"
          echo ""

          echo "=== IMAGES IN DIFFERENT NAMESPACES ==="
          for ns in default buildkit finch moby; do
            echo "Images in namespace '$ns':"
            sudo ctr -n $ns images list 2>/dev/null || echo "  No images or namespace doesn't exist"
            echo ""
          done

          echo "=== FINCH-DAEMON PROCESS INFO ==="
          echo "finch-daemon command line:"
          ps aux | grep finch-daemon | grep -v grep || echo "finch-daemon not found in process list"
          echo ""

          echo "=== CONTAINERD CONNECTION TEST ==="
          echo "Testing containerd connectivity:"
          sudo ctr version || echo "Could not connect to containerd"
          echo ""

          echo "=== BUILDKIT CONNECTION TEST ==="
          echo "Testing BuildKit connectivity:"
          /usr/local/bin/buildctl --addr=unix:///run/buildkit/buildkitd.sock debug info || echo "Could not connect to BuildKit"

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout $(git describe --tags `git rev-list --tags --max-count=1`)  # Latest tag
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Run unit tests
        working-directory: aws-sam-cli
        run: |
          echo "=== UNIT TESTS - Started at $(date) ==="
          
          # Fix common issues from test guide
          ulimit -n 8192  # Fix "too many open files" 
          
          # Clean up potentially problematic Docker config entries
          if [ -f ~/.docker/config.json ]; then
            if command -v jq >/dev/null 2>&1; then
              jq 'del(.credsStore)' ~/.docker/config.json > ~/.docker/config.json.tmp && mv ~/.docker/config.json.tmp ~/.docker/config.json
            else
              sed -i '/"credsStore"/d' ~/.docker/config.json
            fi
          fi
          
          make test | tee unit_test_output.txt
          
          # Check coverage (should be ~94%)
          COVERAGE=$(grep -o "[0-9]\+%" unit_test_output.txt | head -1 | tr -d '%')
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" -lt 90 ]; then
            echo "❌ Coverage below threshold! Got: $COVERAGE%, Expected: ~94%"
            exit 1
          else
            echo "✅ Unit tests passed with $COVERAGE% coverage"
          fi
        continue-on-error: true

      - name: Verbose Testing
        working-directory: aws-sam-cli
        run: |
          SAM_CLI_DEV=1 python -m pytest tests/integration/local/invoke/test_integration_cli_images.py::TestSamPython36HelloWorldIntegrationImages::test_invoke_with_env_vars -v -s --tb=long
        continue-on-error: false

      - name: Run invoke tests
        working-directory: aws-sam-cli
        run: |
          echo "=== INVOKE TESTS - Started at $(date) ==="
          SAM_CLI_DEV=1 timeout 90m python -m pytest tests/integration/local/invoke -k 'not Terraform' -v --tb=short > invoke_output.txt 2>&1 || true
          
          echo "=== INVOKE TEST OUTPUT ==="
          cat invoke_output.txt
          echo "=== END INVOKE TEST OUTPUT ==="
          
          # Expected failures from test guide (12 total from different test classes)
          cat > expected_invoke_failures.txt << 'EOF'
          test_invoke_with_error_during_image_build
          test_invoke_with_timeout_set_0_TimeoutFunction
          test_invoke_with_timeout_set_1_TimeoutFunctionWithParameter
          test_invoke_with_timeout_set_2_TimeoutFunctionWithStringParameter
          test_building_new_rapid_image_removes_old_rapid_images
          test_invoke_returns_expected_results_from_git_function
          test_invoke_returns_expected_results_from_git_function_with_parameters
          EOF
          
          # Note: Guide shows 12 failures but some test names repeat across different test classes
          # The sed extraction will capture all instances regardless of test class
          
          # Extract actual failures
          grep "FAILED" invoke_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_invoke_failures.txt || true
          
          # Find unexpected failures
          UNEXPECTED=$(grep -v -f expected_invoke_failures.txt actual_invoke_failures.txt 2>/dev/null || true)
          
          if [ -n "$UNEXPECTED" ]; then
            echo "❌ Unexpected failures found:"
            echo "$UNEXPECTED"
            exit 1
          else
            echo "✅ All failures were expected (guide shows 12 known issues across test classes)"
          fi
        continue-on-error: true

      - name: Run start-lambda tests
        working-directory: aws-sam-cli
        run: |
          echo "=== START-LAMBDA TESTS - Started at $(date) ==="
          SAM_CLI_DEV=1 timeout 45m python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v --tb=short > start_lambda_output.txt 2>&1 || true
          
          echo "=== START-LAMBDA TEST OUTPUT ==="
          cat start_lambda_output.txt
          echo "=== END START-LAMBDA TEST OUTPUT ==="
          
          # Should pass completely per test guide
          if grep -q "FAILED" start_lambda_output.txt; then
            echo "❌ Start-lambda tests failed (should pass completely)"
            grep "FAILED" start_lambda_output.txt
            exit 1
          else
            echo "✅ All start-lambda tests passed as expected"
          fi
        continue-on-error: true

      - name: Run start-api tests
        working-directory: aws-sam-cli
        run: |
          echo "=== START-API TESTS - Started at $(date) ==="
          ulimit -n 8192
          SAM_CLI_DEV=1 timeout 90m python -m pytest tests/integration/local/start_api -k 'not Terraform' -v --tb=short > start_api_output.txt 2>&1 || true

          echo "=== START-API TEST OUTPUT ==="
          cat start_api_output.txt
          echo "=== END START-API TEST OUTPUT ==="
          
          # Should pass completely per test guide
          if grep -q "FAILED" start_api_output.txt; then
            echo "❌ Start-api tests failed (should pass completely)"
            grep "FAILED" start_api_output.txt
            exit 1
          else
            echo "✅ All start-api tests passed as expected"
          fi
        continue-on-error: true

      - name: Run sync tests  
        working-directory: aws-sam-cli
        run: |
          echo "=== SYNC TESTS - Started at $(date) ==="
          AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION SAM_CLI_DEV=1 timeout 30m python -m pytest tests/integration/sync -k 'image' -v --tb=short > sync_output.txt 2>&1 || true
          
          echo "=== SYNC TEST OUTPUT ==="
          cat sync_output.txt
          echo "=== END SYNC TEST OUTPUT ==="
          
          # Should pass completely per test guide
          if grep -q "FAILED" sync_output.txt; then
            echo "❌ Sync tests failed (should pass completely)"
            grep "FAILED" sync_output.txt
            exit 1
          else
            echo "✅ All sync tests passed as expected"
          fi
        continue-on-error: true

      - name: Run package tests
        working-directory: aws-sam-cli  
        run: |
          echo "=== PACKAGE TESTS - Started at $(date) ==="
          AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION SAM_CLI_DEV=1 SAM_CLI_TELEMETRY=0 timeout 15m python -m pytest tests/integration/package/test_package_command_image.py -v --tb=short > package_output.txt 2>&1 || true
          
          echo "=== PACKAGE TEST OUTPUT ==="
          cat package_output.txt
          echo "=== END PACKAGE TEST OUTPUT ==="
          
          # Expected failures from test guide
          cat > expected_package_failures.txt << 'EOF'
          test_package_with_deep_nested_template_image
          test_package_template_with_image_repositories_nested_stack
          test_package_with_loadable_image_archive_0_template_image_load_yaml
          EOF
          
          # Extract actual failures
          grep "FAILED" package_output.txt | sed 's/.*::\(test_[a-zA-Z0-9_]*\).*/\1/' > actual_package_failures.txt || true
          
          # Also check for nested stack failures (pattern match)
          grep "FAILED.*test_package_template_with_image_repositories_nested_stack" package_output.txt >> actual_package_failures.txt || true
          
          # Find unexpected failures (exclude nested stack pattern)
          UNEXPECTED=$(grep -v -f expected_package_failures.txt actual_package_failures.txt | grep -v "test_package_template_with_image_repositories_nested_stack" || true)
          
          if [ -n "$UNEXPECTED" ]; then
            echo "❌ Unexpected failures found:"
            echo "$UNEXPECTED"
            exit 1
          else
            echo "✅ All failures were expected (3 known issues)"
          fi
        continue-on-error: true

      - name: Run deploy tests
        working-directory: aws-sam-cli
        run: |
          echo "=== DEPLOY TESTS - Started at $(date) ==="
          AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION SAM_CLI_DEV=1 timeout 45m python -m pytest tests/integration/deploy -k 'image' -v --tb=short > deploy_output.txt 2>&1 || true
          
          echo "=== DEPLOY TEST OUTPUT ==="
          cat deploy_output.txt
          echo "=== END DEPLOY TEST OUTPUT ==="
          
          # Check for arbitrary passes (PASSED with errors in preceding lines)
          ARBITRARY_PASSES=""
          if grep -q "PASSED" deploy_output.txt; then
            # Get line numbers of PASSED tests
            grep -n "PASSED" deploy_output.txt | while read line; do
              LINE_NUM=$(echo "$line" | cut -d: -f1)
              TEST_NAME=$(echo "$line" | grep -o "test_[a-zA-Z0-9_]*")
              
              # Check 10 lines before for errors
              START_LINE=$((LINE_NUM - 10))
              if [ $START_LINE -lt 1 ]; then START_LINE=1; fi
              
              # Look for error indicators in preceding lines
              if sed -n "${START_LINE},${LINE_NUM}p" deploy_output.txt | grep -qi "error\|exception\|fail\|traceback"; then
                echo "⚠️  Arbitrary pass detected: $TEST_NAME (errors found before PASSED)"
                ARBITRARY_PASSES="$ARBITRARY_PASSES $TEST_NAME"
              fi
            done
          fi
          
          PASSED_COUNT=$(grep -c "PASSED" deploy_output.txt || echo "0")
          FAILED_COUNT=$(grep -c "FAILED" deploy_output.txt || echo "0")
          
          echo "Deploy results: $PASSED_COUNT passed, $FAILED_COUNT failed"
          
          # Most should fail due to multi-arch limitation
          if [ "$FAILED_COUNT" -eq 0 ]; then
            echo "❌ No deploy tests failed (expected most to fail due to multi-arch)"
            exit 1
          elif [ -n "$ARBITRARY_PASSES" ]; then
            echo "✅ Deploy tests mostly failed as expected, with some arbitrary passes (errors present but test passed)"
          else
            echo "✅ Deploy tests behaved as expected (multi-arch limitation)"
          fi
        continue-on-error: true

      - name: Show finch-daemon logs
        if: always()
        run: |
          echo "=== FINCH-DAEMON OUTPUT ==="
          cat finch-daemon.log || echo "No log file found"

      - name: Final cleanup
        if: always()
        run: |
          echo "=== Final cleanup ==="
          # Clean up any remaining SAM managed stack
          STACK_NAME="aws-sam-cli-managed-default"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            echo "Cleaning up final SAM managed stack..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || true
          fi
          echo "Cleanup completed"