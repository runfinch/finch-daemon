name: Release Finch Daemon
on:
  workflow_dispatch:
  workflow_call:
  # inputs:
  #   ref_name:
  #     required: true
  #     type: string
  # push:
  #   tags:
  #     - 'v[0-9]+.[0-9]+.[0-9]+'
env:
  GO_VERSION: '1.23.0'
permissions:
  contents: write
  deployments: write
jobs:
  get-latest-tag:
    name: Get the latest release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.latest-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: 'Get the latest tag'
        id: latest-tag
        uses: "WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce" # v1.4.0
  generate-artifacts:
    needs: get-latest-tag
    runs-on: ubuntu-latest
    env:
      # Set during setup.
      RELEASE_TAG: ${{ needs.get-latest-tag.outputs.tag }}
      DYNAMIC_BINARY_NAME: ''
      STATIC_BINARY_NAME: ''
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: 'Echo RELEASE_TAG ENV'
        run: echo ${{ env.RELEASE_TAG }}
      - name: Setup variables and release directories
        run: |
          touch THIRD_PARTY_LICENSES
          export release_tag=${{ env.RELEASE_TAG }}
          export release_version=${release_tag/v/} # Remove v from tag name
          echo "DYNAMIC_BINARY_NAME=finch-daemon-${release_version}-linux-amd64.tar.gz" >> $GITHUB_ENV

          mkdir release
      - name: Create release binaries
        run: make RELEASE_TAG=${{ env.RELEASE_TAG }} release
      - uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: release/
          if-no-files-found: error
    outputs:
      release_tag: ${{ env.RELEASE_TAG }}
      dynamic_binary_name: ${{ env.DYNAMIC_BINARY_NAME }}
      static_binary_name: ${{ env.STATIC_BINARY_NAME }}
  validate-artifacts:
    needs: generate-artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: release/
      - run: bash scripts/verify-release-artifacts.sh ${{ needs.generate-artifacts.outputs.release_tag }}
  create-release:
    needs: [generate-artifacts, validate-artifacts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: artifacts
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate-artifacts.outputs.release_tag }}
          prerelease: false
          generate_release_notes: false
          files: |
            ${{ needs.generate-artifacts.outputs.dynamic_binary_name }}
            ${{ needs.generate-artifacts.outputs.dynamic_binary_name }}.sha256sum
