name: samcli-canary-isolation

on:
  push:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli_canary.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli_canary.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.8'
  CONTAINERD_VERSION: "1.7.27"

permissions:
  id-token: write
  contents: read

jobs:
  # Phase 1: Pure Local Tests (Parallel)
  local-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      DOCKER_CONFIG: /home/runner/.docker
      BY_CANARY: false  # Skip AWS-dependent tests
      SAM_CLI_DEV: 1 
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - invoke
          - start-lambda
          - start-api
          - build
    steps:
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Docker config for finch-daemon
        run: |
          mkdir -p $DOCKER_CONFIG
          echo '{"auths":{"docker.io":{},"public.ecr.aws":{}}}' > $DOCKER_CONFIG/config.json

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install and validate finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10
          sudo chmod 666 /run/buildkit/buildkitd.sock

      - name: Build and start finch-daemon
        run: |
          make build
          sudo cp bin/docker-credential-finch /usr/bin
          sudo bin/finch-daemon --debug --socket-owner $UID &
          sleep 10
          curl --unix-socket /run/finch.sock http://localhost/_ping

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout v1.142.1
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Run ${{ matrix.test-suite }} local tests
        working-directory: aws-sam-cli
        run: |
          case "${{ matrix.test-suite }}" in
            invoke)
              echo "Running local invoke tests (BY_CANARY=false)..."
              python -m pytest tests/integration/local/invoke -k 'not Terraform' -v --tb=short
              ;;
            start-lambda)
              echo "Running local start-lambda tests (BY_CANARY=false)..."
              python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v --tb=short
              ;;
            start-api)
              echo "Running local start-api tests (BY_CANARY=false)..."
              ulimit -n 8192
              python -m pytest tests/integration/local/start_api -k 'not Terraform' -v --tb=short
              ;;
            build)
              echo "Running local build tests (BY_CANARY=false)..."
              python -m pytest tests/integration/buildcmd -k '(container or image) and not sar and not terraform' -v --tb=short
              ;;
          esac

  # Phase 2: AWS-Dependent Tests (Sequential)
  aws-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 300
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      DOCKER_CONFIG: /home/runner/.docker
      BY_CANARY: true  # Run AWS-dependent tests
      SAM_CLI_DEV: 1 
    steps:
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Docker config for finch-daemon
        run: |
          mkdir -p $DOCKER_CONFIG
          echo '{"auths":{"docker.io":{},"public.ecr.aws":{}}}' > $DOCKER_CONFIG/config.json

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install and validate finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10
          sudo chmod 666 /run/buildkit/buildkitd.sock

      - name: Build and start finch-daemon
        run: |
          make build
          sudo cp bin/docker-credential-finch /usr/bin
          sudo bin/finch-daemon --debug --socket-owner $UID &
          sleep 10
          curl --unix-socket /run/finch.sock http://localhost/_ping

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: samcli-aws-tests
          aws-region: ${{ secrets.REGION }}

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Clean up SAM managed stack
        run: |
          STACK_NAME="aws-sam-cli-managed-default"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            echo "Cleaning up existing SAM managed stack..."
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION --query 'Stacks[0].Outputs[?OutputKey==`SourceBucket`].OutputValue' --output text 2>/dev/null || echo "")
            if [ -n "$BUCKET_NAME" ]; then
              echo "Emptying S3 bucket: $BUCKET_NAME"
              aws s3 rm s3://$BUCKET_NAME --recursive || true
            fi
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION
            echo "Stack cleanup completed"
          fi

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout v1.142.1
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Run AWS-dependent tests sequentially
        working-directory: aws-sam-cli
        run: |
          echo "=== Running AWS-dependent tests (BY_CANARY=true) ==="
          
          echo "1. Invoke layer tests..."
          python -m pytest tests/integration/local/invoke -k 'not Terraform' -v --tb=short || echo "Invoke layer tests completed"
          
          echo "2. Start-lambda layer tests..."
          python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v --tb=short || echo "Start-lambda layer tests completed"
          
          echo "3. Start-api layer tests..."
          ulimit -n 8192
          python -m pytest tests/integration/local/start_api -k 'not Terraform' -v --tb=short || echo "Start-api layer tests completed"
          
          echo "4. Build AWS tests..."
          python -m pytest tests/integration/buildcmd -k '(container or image) and not sar and not terraform' -v --tb=short || echo "Build AWS tests completed"
          
          echo "5. Sync tests..."
          python -m pytest tests/integration/sync -k 'image' -v --tb=short || echo "Sync tests completed"
          
          echo "6. Package tests..."
          python -m pytest tests/integration/package/test_package_command_image.py -v --tb=short || echo "Package tests completed"
          
          echo "7. Deploy tests..."
          python -m pytest tests/integration/deploy -k 'image' -v --tb=short || echo "Deploy tests completed"
          
          echo "=== All AWS tests completed ==="
