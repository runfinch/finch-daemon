name: Finch VM
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:
env:
  GO_VERSION: '1.24.x'
jobs:
  mac-test-e2e:
    runs-on: codebuild-finch-daemon-arm64-2-instance-${{ github.run_id }}-${{ github.run_attempt }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        vm_type:
          - name: rosetta
            rosetta: true
          - name: qemu
            rosetta: false
    steps:
      - name: Clean macOS runner workspace
        run: |
          rm -rf ${{ github.workspace }}/*
          # Clean up any leftover Finch VM state
          su ec2-user -c 'finch vm remove -f' || true
          sudo pkill -f socket_vmnet || true
          sudo rm -rf /private/var/run/finch-lima/*.sock || true
          sudo rm -rf /Applications/Finch/lima/data/finch/_cache || true
          # Clean up containers and images via Finch CLI
          su ec2-user -c 'finch system prune -f' || true

      - name: Configure Git for ec2-user
        run: |
          git config --global --add safe.directory "*"
        shell: bash
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Configure Go for ec2-user
        run: |
          # Ensure Go is properly configured for ec2-user
          chown -R ec2-user:staff $GOPATH || true
          chown -R ec2-user:staff $RUNNER_TOOL_CACHE/go || true
      - name: Install Rosetta 2
        run: su ec2-user -c 'echo "A" | /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true'

      - name: Configure Homebrew for ec2-user
        run: |
          echo "Creating .brewrc file for ec2-user..."
          cat > /Users/ec2-user/.brewrc << 'EOF'
          # Homebrew environment setup
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          export HOMEBREW_PREFIX="/opt/homebrew"
          export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
          export HOMEBREW_REPOSITORY="/opt/homebrew"
          export HOMEBREW_NO_AUTO_UPDATE=1
          EOF
          chown ec2-user:staff /Users/ec2-user/.brewrc

          # Fix Homebrew permissions
          echo "Setting permissions for Homebrew directories..."
          mkdir -p /opt/homebrew/Cellar
          chown -R ec2-user:staff /opt/homebrew
        shell: bash

      # Install dependencies using ec2-user with custom environment
      - name: Install dependencies
        run: |
          echo "Installing dependencies as ec2-user..."
          # Run brew with custom environment
          su ec2-user -c 'source /Users/ec2-user/.brewrc && brew install lz4 automake autoconf libtool yq'
        shell: bash

      - name: Checkout mainline finch repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: main
          repository: runfinch/finch
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive

      - name: Checkout finch-daemon PR
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.pull_request.head.sha || 'main' }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive
          path: finch-daemon-pr

      - name: Configure Finch
        run: |
          echo "Original config:"
          su ec2-user -c 'cat ~/.finch/finch.yaml || echo "No config file found"'
          echo "Configuring Finch for ${{ matrix.vm_type.name }} (rosetta: ${{ matrix.vm_type.rosetta }})"
          su ec2-user -c 'yq eval ".vmType = \"vz\"" -i ~/.finch/finch.yaml'
          su ec2-user -c 'yq eval ".rosetta = ${{ matrix.vm_type.rosetta }}" -i ~/.finch/finch.yaml'
          su ec2-user -c 'yq eval ".dockercompat = false" -i ~/.finch/finch.yaml'
          echo "Updated config:"
          su ec2-user -c 'cat ~/.finch/finch.yaml'

      - name: Build and setup Finch VM
        run: ./finch-daemon-pr/scripts/build-and-setup-finch-vm.sh

      # Run e2e tests
      - name: Run e2e tests
        run: |
          echo "Running e2e tests..."

          su ec2-user -c 'finch version' || true
          su ec2-user -c 'cd ${{ github.workspace }}/finch-daemon-pr && make test-e2e-inside-vm'
        shell: bash

      # Cleanup
      - name: Stop Finch VM
        run: |
          echo "Stopping Finch VM as ec2-user..."

          # Stop VM using ec2-user with custom environment
          su ec2-user -c "source /Users/ec2-user/.brewrc && HOME=/Users/ec2-user finch vm stop"
        shell: bash
        if: always()
