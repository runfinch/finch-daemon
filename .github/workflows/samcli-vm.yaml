name: samcli-vm

on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.24.x'
  PYTHON_VERSION: '3.11'
  PYTHON_BINARY: 'python3.11'
  AWS_DEFAULT_REGION: "${{ secrets.REGION }}"
  BY_CANARY: true # allows full testing
  SAM_CLI_DEV: 1
  SAM_CLI_TELEMETRY: 0
  DOCKER_HOST: unix:///Applications/Finch/lima/data/finch/sock/finch.sock
  DOCKER_CONFIG: /Users/ec2-user/.finch

permissions:
  id-token: write
  contents: read

jobs:
  samcli-vm-test:
    runs-on: codebuild-finch-daemon-arm64-2-instance-${{ github.run_id }}-${{ github.run_attempt }}
    steps:

      - name: Clean macOS runner workspace
        run: rm -rf ${{ github.workspace }}/*

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup runner and dependencies
        run: ./scripts/samcli-vm/setup-runner.sh

      - name: Configure workspace for ec2-user
        run: chown -R ec2-user:staff ${{ github.workspace }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.SAMCLI_VM_ROLE_SYNC }}
          role-session-name: samcli-finch-vm-sequential-tests
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 14400

      - name: Checkout finch-daemon repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive

      - name: Setup Finch and Docker
        run: ./scripts/samcli-vm/setup-finch.sh

      - name: Checkout SAM CLI
        uses: actions/checkout@v4
        with:
          repository: aws/aws-sam-cli
          submodules: recursive
          path: aws-sam-cli

      - name: Setup SAM CLI
        run: ./scripts/samcli-vm/setup-samcli.sh

      - name: Run unit tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-unit-tests.sh
          echo "UNIT_EXIT_CODE=$(cat /tmp/unit_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Run sync tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-sync-tests.sh
          echo "SYNC_EXIT_CODE=$(cat /tmp/sync_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Run package tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-package-tests.sh
          echo "PACKAGE_EXIT_CODE=$(cat /tmp/package_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Run start-api tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-start-api-tests.sh
          echo "START_API_EXIT_CODE=$(cat /tmp/start_api_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Run start-lambda tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-start-lambda-tests.sh
          echo "START_LAMBDA_EXIT_CODE=$(cat /tmp/start_lambda_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Patch SAM CLI for image cleanup
        continue-on-error: true
        run: |
          # Apply git patch to handle ImageNotFound exceptions for all Docker tests
          su ec2-user -c 'cd /Users/ec2-user/aws-sam-cli && git apply ${{ github.workspace }}/scripts/samcli-vm/invoke-teardown.patch'
          echo "PATCH_EXIT_CODE=$?" >> $GITHUB_ENV
        shell: bash

      - name: Run invoke tests
        continue-on-error: true
        run: |
          ./scripts/samcli-vm/run-invoke-tests.sh
          echo "INVOKE_EXIT_CODE=$(cat /tmp/invoke_exit_code 2>/dev/null || echo 1)" >> $GITHUB_ENV

      - name: Check test results
        run: ./scripts/samcli-vm/check-test-results.sh

  # ensuring resources are clean post-test
  cleanup:
    runs-on: ubuntu-latest
    needs: samcli-vm-test
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          role-to-assume: ${{ secrets.SAMCLI_VM_ROLE_SYNC }}
          role-session-name: cleanup
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 1000

      - name: Comprehensive AWS resource cleanup
        timeout-minutes: 10
        run: ./scripts/cleanup-aws-resources.sh
