name: samcli-sequential

on:
  push:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli_sequential.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  pull_request:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/samcli_sequential.yaml'
      - 'Makefile*'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
      - 'api/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.8'
  CONTAINERD_VERSION: "1.7.27"

permissions:
  id-token: write
  contents: read

jobs:
  samcli-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours for all tests
    env:
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      DOCKER_HOST: unix:///run/finch.sock
      DOCKER_CONFIG: /home/runner/.docker
      BY_CANARY: true  # Full AWS access for all tests
      SAM_CLI_DEV: 1 
    steps:
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.12'

      - name: Checkout finch-daemon repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Docker config for finch-daemon
        run: |
          mkdir -p $DOCKER_CONFIG
          echo '{"auths":{"docker.io":{},"public.ecr.aws":{}}}' > $DOCKER_CONFIG/config.json

      - name: Stop pre-existing services
        run: |
          sudo systemctl stop docker
          sudo systemctl stop containerd

      - name: Remove default podman network config
        run: |
          sudo rm -f /etc/cni/net.d/87-podman-bridge.conflist

      - name: Clean up Daemon socket
        run: |
          sudo rm -f /run/finch.sock
          sudo rm -f /run/finch.pid
          sudo rm -f /run/finch-credential.sock

      - name: Install and validate finch-daemon dependencies
        run: |
          ./setup-test-env.sh
          sleep 10
          sudo chmod 666 /run/buildkit/buildkitd.sock

      - name: Build and start finch-daemon
        run: |
          make build
          sudo cp bin/docker-credential-finch /usr/bin
          sudo bin/finch-daemon --debug --socket-owner $UID &
          sleep 10
          curl --unix-socket /run/finch.sock http://localhost/_ping

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: samcli-sequential-tests
          aws-region: ${{ secrets.REGION }}
          role-duration-seconds: 14400

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "AWS credentials configured successfully"

      - name: Clean up SAM managed stack (robust)
        run: |
          STACK_NAME="aws-sam-cli-managed-default"
          echo "=== Cleaning up SAM managed stack ==="
          
          # Check if stack exists and get its status
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION --query 'Stacks[0].StackStatus' --output text)
            echo "Found existing stack with status: $STACK_STATUS"
            
            # Get the S3 bucket name from stack outputs
            BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION --query 'Stacks[0].Outputs[?OutputKey==`SourceBucket`].OutputValue' --output text 2>/dev/null || echo "")
            
            if [ -n "$BUCKET_NAME" ]; then
              echo "Found S3 bucket: $BUCKET_NAME"
              echo "Emptying S3 bucket before stack deletion..."
              
              # Delete all object versions and delete markers
              aws s3api list-object-versions --bucket "$BUCKET_NAME" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
                if [ -n "$key" ] && [ -n "$version" ]; then
                  aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version" || true
                fi
              done
              
              # Delete any delete markers
              aws s3api list-object-versions --bucket "$BUCKET_NAME" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text | while read key version; do
                if [ -n "$key" ] && [ -n "$version" ]; then
                  aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version" || true
                fi
              done
              
              echo "S3 bucket emptied successfully"
            else
              echo "No S3 bucket found in stack outputs"
            fi
            
            # Force continue rollback only for specific failed states
            if [[ "$STACK_STATUS" == "UPDATE_ROLLBACK_FAILED" ]]; then
              echo "Stack is in UPDATE_ROLLBACK_FAILED state, attempting to continue rollback..."
              aws cloudformation continue-update-rollback --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || true
              sleep 30
            elif [[ "$STACK_STATUS" == *"FAILED"* ]]; then
              echo "Stack is in failed state ($STACK_STATUS), will attempt direct deletion..."
            fi
            
            # Delete stack
            echo "Deleting existing SAM managed stack..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || true
            
            # Wait for deletion with timeout
            echo "Waiting for stack deletion to complete (max 10 minutes)..."
            timeout 600 aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || echo "Stack deletion timed out or failed, continuing anyway..."
            echo "✅ Stack cleanup completed"
          else
            echo "No existing SAM managed stack found - starting fresh"
          fi

          echo "=== Additional resource cleanup ==="
          
          # Clean up orphaned Lambda layers (created by tests)
          echo "Cleaning up test Lambda layers..."
          aws lambda list-layers --region $AWS_DEFAULT_REGION --query 'Layers[].LayerName' --output text | tr '\t' '\n' | while read layer_name; do
            if [[ "$layer_name" =~ ^(sam-cli-|test-|layer-|TestLayer) ]]; then
              echo "Found test layer: $layer_name"
              # Get all versions of this layer
              aws lambda list-layer-versions --layer-name "$layer_name" --region $AWS_DEFAULT_REGION --query 'LayerVersions[].Version' --output text | tr '\t' '\n' | while read version; do
                echo "Deleting layer version: $layer_name:$version"
                aws lambda delete-layer-version --layer-name "$layer_name" --version-number "$version" --region $AWS_DEFAULT_REGION || true
              done
            fi
          done || true

          # Clean up test CloudFormation stacks
          echo "Cleaning up test CloudFormation stacks..."
          aws cloudformation list-stacks --region $AWS_DEFAULT_REGION --query 'StackSummaries[?starts_with(StackName, `sam-`) && StackStatus != `DELETE_COMPLETE`].StackName' --output text | tr '\t' '\n' | while read stack_name; do
            if [ -n "$stack_name" ] && [ "$stack_name" != "$STACK_NAME" ]; then
              echo "Found test stack: $stack_name"
              aws cloudformation delete-stack --stack-name "$stack_name" --region $AWS_DEFAULT_REGION || true
            fi
          done || true

          # Clean up test S3 buckets
          echo "Cleaning up test S3 buckets..."
          aws s3api list-buckets --query 'Buckets[?starts_with(Name, `sam-cli-`) || starts_with(Name, `aws-sam-cli-`)].Name' --output text | tr '\t' '\n' | while read bucket_name; do
            if [ -n "$bucket_name" ]; then
              echo "Found test bucket: $bucket_name"
              # Empty bucket first
              aws s3 rm s3://$bucket_name --recursive || true
              # Delete bucket
              aws s3api delete-bucket --bucket "$bucket_name" --region $AWS_DEFAULT_REGION || true
            fi
          done || true

          # Clean up orphaned Lambda functions (not in stacks)
          echo "Cleaning up test Lambda functions..."
          aws lambda list-functions --region $AWS_DEFAULT_REGION --query 'Functions[?starts_with(FunctionName, `sam-cli-`) || starts_with(FunctionName, `test-`)].FunctionName' --output text | tr '\t' '\n' | while read function_name; do
            if [ -n "$function_name" ]; then
              echo "Found test function: $function_name"
              aws lambda delete-function --function-name "$function_name" --region $AWS_DEFAULT_REGION || true
            fi
          done || true

          echo "✅ Additional cleanup completed"

      - name: Set up SAM CLI from source
        run: |
          git clone https://github.com/aws/aws-sam-cli.git
          cd aws-sam-cli
          git checkout v1.142.1
          git submodule update --init --recursive
          python -m pip install --upgrade pip
          make init
          samdev --version

      - name: Run SAM CLI tests sequentially
        working-directory: aws-sam-cli
        run: |
          echo "=== Running SAM CLI tests sequentially to avoid AWS resource conflicts ==="
          START_TIME=$(date +%s)

          # echo "1. INVOKE TESTS - Started at $(date)"
          # INVOKE_START=$(date +%s)
          # timeout 90m python -m pytest tests/integration/local/invoke -k 'not Terraform' -v --tb=short || echo "Invoke tests completed with some failures"
          # INVOKE_END=$(date +%s)
          # echo "   Invoke duration: $((INVOKE_END - INVOKE_START)) seconds"

          echo "2. START-LAMBDA TESTS - Started at $(date)"
          LAMBDA_START=$(date +%s)
          timeout 45m python -m pytest tests/integration/local/start_lambda -k 'not Terraform' -v --tb=short || echo "Start-lambda tests completed with some failures"
          LAMBDA_END=$(date +%s)
          echo "   Start-lambda duration: $((LAMBDA_END - LAMBDA_START)) seconds"

          # echo "3. START-API TESTS - Started at $(date)"
          # API_START=$(date +%s)
          # ulimit -n 8192
          # timeout 90m python -m pytest tests/integration/local/start_api -k 'not Terraform' -v --tb=short || echo "Start-api tests completed with some failures"
          # API_END=$(date +%s)
          # echo "   Start-api duration: $((API_END - API_START)) seconds"

          # echo "4. BUILD TESTS - Started at $(date)"
          # BUILD_START=$(date +%s)
          # timeout 90m python -m pytest tests/integration/buildcmd -k '(container or image) and not sar and not terraform' -v --tb=short || echo "Build tests completed with some failures"
          # BUILD_END=$(date +%s)
          # echo "   Build duration: $((BUILD_END - BUILD_START)) seconds"

          echo "5. SYNC TESTS - Started at $(date)"
          SYNC_START=$(date +%s)
          timeout 30m python -m pytest tests/integration/sync -k 'image' -v --tb=short || echo "Sync tests completed with some failures"
          SYNC_END=$(date +%s)
          echo "   Sync duration: $((SYNC_END - SYNC_START)) seconds"

          echo "6. PACKAGE TESTS - Started at $(date)"
          PACKAGE_START=$(date +%s)
          timeout 15m python -m pytest tests/integration/package/test_package_command_image.py -v --tb=short || echo "Package tests completed with some failures"
          PACKAGE_END=$(date +%s)
          echo "   Package duration: $((PACKAGE_END - PACKAGE_START)) seconds"

          echo "7. DEPLOY TESTS - Started at $(date)"
          DEPLOY_START=$(date +%s)
          timeout 45m python -m pytest tests/integration/deploy -k 'image' -v --tb=short || echo "Deploy tests completed with some failures"
          DEPLOY_END=$(date +%s)
          echo "   Deploy duration: $((DEPLOY_END - DEPLOY_START)) seconds"

          TOTAL_END=$(date +%s)
          echo "=== TOTAL DURATION: $((TOTAL_END - START_TIME)) seconds ==="
          echo "=== All SAM CLI tests completed sequentially ==="

      - name: Final cleanup
        if: always()
        run: |
          echo "=== Final cleanup ==="
          # Clean up any remaining SAM managed stack
          STACK_NAME="aws-sam-cli-managed-default"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION >/dev/null 2>&1; then
            echo "Cleaning up final SAM managed stack..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region $AWS_DEFAULT_REGION || true
          fi
          echo "Cleanup completed"
