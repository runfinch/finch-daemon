// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/api/handlers/builder (interfaces: Service)

// Package mocks_builder is a generated GoMock package.
package mocks_builder

import (
	context "context"
	io "io"
	reflect "reflect"

	types "github.com/containerd/nerdctl/pkg/api/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/runfinch/finch-daemon/pkg/api/types"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockService) Build(arg0 context.Context, arg1 *types.BuilderBuildOptions, arg2 io.ReadCloser) ([]types0.BuildResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types0.BuildResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockServiceMockRecorder) Build(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockService)(nil).Build), arg0, arg1, arg2)
}
