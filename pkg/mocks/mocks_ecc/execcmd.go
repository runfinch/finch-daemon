// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/ecc (interfaces: ExecCmd)

// Package mocks_ecc is a generated GoMock package.
package mocks_ecc

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecCmd is a mock of ExecCmd interface.
type MockExecCmd struct {
	ctrl     *gomock.Controller
	recorder *MockExecCmdMockRecorder
}

// MockExecCmdMockRecorder is the mock recorder for MockExecCmd.
type MockExecCmdMockRecorder struct {
	mock *MockExecCmd
}

// NewMockExecCmd creates a new mock instance.
func NewMockExecCmd(ctrl *gomock.Controller) *MockExecCmd {
	mock := &MockExecCmd{ctrl: ctrl}
	mock.recorder = &MockExecCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecCmd) EXPECT() *MockExecCmdMockRecorder {
	return m.recorder
}

// GetDir mocks base method.
func (m *MockExecCmd) GetDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDir indicates an expected call of GetDir.
func (mr *MockExecCmdMockRecorder) GetDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDir", reflect.TypeOf((*MockExecCmd)(nil).GetDir))
}

// Run mocks base method.
func (m *MockExecCmd) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockExecCmdMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecCmd)(nil).Run))
}

// SetDir mocks base method.
func (m *MockExecCmd) SetDir(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDir", arg0)
}

// SetDir indicates an expected call of SetDir.
func (mr *MockExecCmdMockRecorder) SetDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDir", reflect.TypeOf((*MockExecCmd)(nil).SetDir), arg0)
}

// SetStderr mocks base method.
func (m *MockExecCmd) SetStderr(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStderr", arg0)
}

// SetStderr indicates an expected call of SetStderr.
func (mr *MockExecCmdMockRecorder) SetStderr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStderr", reflect.TypeOf((*MockExecCmd)(nil).SetStderr), arg0)
}

// SetStdin mocks base method.
func (m *MockExecCmd) SetStdin(arg0 io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdin", arg0)
}

// SetStdin indicates an expected call of SetStdin.
func (mr *MockExecCmdMockRecorder) SetStdin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdin", reflect.TypeOf((*MockExecCmd)(nil).SetStdin), arg0)
}

// SetStdout mocks base method.
func (m *MockExecCmd) SetStdout(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdout", arg0)
}

// SetStdout indicates an expected call of SetStdout.
func (mr *MockExecCmdMockRecorder) SetStdout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdout", reflect.TypeOf((*MockExecCmd)(nil).SetStdout), arg0)
}
