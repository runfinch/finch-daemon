// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/archive (interfaces: TarExtractor)

// Package mocks_archive is a generated GoMock package.
package mocks_archive

import (
	io "io"
	reflect "reflect"

	archive "github.com/docker/docker/pkg/archive"
	gomock "github.com/golang/mock/gomock"
	ecc "github.com/runfinch/finch-daemon/pkg/ecc"
)

// MockTarExtractor is a mock of TarExtractor interface.
type MockTarExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTarExtractorMockRecorder
}

// MockTarExtractorMockRecorder is the mock recorder for MockTarExtractor.
type MockTarExtractorMockRecorder struct {
	mock *MockTarExtractor
}

// NewMockTarExtractor creates a new mock instance.
func NewMockTarExtractor(ctrl *gomock.Controller) *MockTarExtractor {
	mock := &MockTarExtractor{ctrl: ctrl}
	mock.recorder = &MockTarExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarExtractor) EXPECT() *MockTarExtractorMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockTarExtractor) Cleanup(arg0 ecc.ExecCmd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup", arg0)
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockTarExtractorMockRecorder) Cleanup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockTarExtractor)(nil).Cleanup), arg0)
}

// CreateExtractCmd mocks base method.
func (m *MockTarExtractor) CreateExtractCmd(arg0 io.Reader, arg1 string) (ecc.ExecCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtractCmd", arg0, arg1)
	ret0, _ := ret[0].(ecc.ExecCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtractCmd indicates an expected call of CreateExtractCmd.
func (mr *MockTarExtractorMockRecorder) CreateExtractCmd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtractCmd", reflect.TypeOf((*MockTarExtractor)(nil).CreateExtractCmd), arg0, arg1)
}

// ExtractCompressed mocks base method.
func (m *MockTarExtractor) ExtractCompressed(arg0 io.Reader, arg1 string, arg2 *archive.TarOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractCompressed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractCompressed indicates an expected call of ExtractCompressed.
func (mr *MockTarExtractorMockRecorder) ExtractCompressed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractCompressed", reflect.TypeOf((*MockTarExtractor)(nil).ExtractCompressed), arg0, arg1, arg2)
}

// ExtractInTemp mocks base method.
func (m *MockTarExtractor) ExtractInTemp(arg0 io.Reader, arg1 string) (ecc.ExecCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractInTemp", arg0, arg1)
	ret0, _ := ret[0].(ecc.ExecCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractInTemp indicates an expected call of ExtractInTemp.
func (mr *MockTarExtractorMockRecorder) ExtractInTemp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractInTemp", reflect.TypeOf((*MockTarExtractor)(nil).ExtractInTemp), arg0, arg1)
}
