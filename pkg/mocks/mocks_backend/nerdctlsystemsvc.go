// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/backend (interfaces: NerdctlSystemSvc)

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	reflect "reflect"

	dockercompat "github.com/containerd/nerdctl/pkg/inspecttypes/dockercompat"
	gomock "github.com/golang/mock/gomock"
)

// MockNerdctlSystemSvc is a mock of NerdctlSystemSvc interface.
type MockNerdctlSystemSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlSystemSvcMockRecorder
}

// MockNerdctlSystemSvcMockRecorder is the mock recorder for MockNerdctlSystemSvc.
type MockNerdctlSystemSvcMockRecorder struct {
	mock *MockNerdctlSystemSvc
}

// NewMockNerdctlSystemSvc creates a new mock instance.
func NewMockNerdctlSystemSvc(ctrl *gomock.Controller) *MockNerdctlSystemSvc {
	mock := &MockNerdctlSystemSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlSystemSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlSystemSvc) EXPECT() *MockNerdctlSystemSvcMockRecorder {
	return m.recorder
}

// GetServerVersion mocks base method.
func (m *MockNerdctlSystemSvc) GetServerVersion(arg0 context.Context) (*dockercompat.ServerVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerVersion", arg0)
	ret0, _ := ret[0].(*dockercompat.ServerVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerVersion indicates an expected call of GetServerVersion.
func (mr *MockNerdctlSystemSvcMockRecorder) GetServerVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerVersion", reflect.TypeOf((*MockNerdctlSystemSvc)(nil).GetServerVersion), arg0)
}
