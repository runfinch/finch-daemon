// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/backend (interfaces: NerdctlBuilderSvc)

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	reflect "reflect"

	types "github.com/containerd/nerdctl/pkg/api/types"
	gomock "github.com/golang/mock/gomock"
	backend "github.com/runfinch/finch-daemon/pkg/backend"
)

// MockNerdctlBuilderSvc is a mock of NerdctlBuilderSvc interface.
type MockNerdctlBuilderSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlBuilderSvcMockRecorder
}

// MockNerdctlBuilderSvcMockRecorder is the mock recorder for MockNerdctlBuilderSvc.
type MockNerdctlBuilderSvcMockRecorder struct {
	mock *MockNerdctlBuilderSvc
}

// NewMockNerdctlBuilderSvc creates a new mock instance.
func NewMockNerdctlBuilderSvc(ctrl *gomock.Controller) *MockNerdctlBuilderSvc {
	mock := &MockNerdctlBuilderSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlBuilderSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlBuilderSvc) EXPECT() *MockNerdctlBuilderSvcMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockNerdctlBuilderSvc) Build(arg0 context.Context, arg1 backend.ContainerdClient, arg2 types.BuilderBuildOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockNerdctlBuilderSvcMockRecorder) Build(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockNerdctlBuilderSvc)(nil).Build), arg0, arg1, arg2)
}

// GetBuildkitHost mocks base method.
func (m *MockNerdctlBuilderSvc) GetBuildkitHost() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildkitHost")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildkitHost indicates an expected call of GetBuildkitHost.
func (mr *MockNerdctlBuilderSvcMockRecorder) GetBuildkitHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildkitHost", reflect.TypeOf((*MockNerdctlBuilderSvc)(nil).GetBuildkitHost))
}
