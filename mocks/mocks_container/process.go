// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/containerd/containerd/v2/client (interfaces: Process)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mocks_container/process.go -package=mocks_container github.com/containerd/containerd/v2/client Process
//

// Package mocks_container is a generated GoMock package.
package mocks_container

import (
	context "context"
	reflect "reflect"
	syscall "syscall"

	client "github.com/containerd/containerd/v2/client"
	cio "github.com/containerd/containerd/v2/pkg/cio"
	gomock "go.uber.org/mock/gomock"
)

// MockProcess is a mock of Process interface.
type MockProcess struct {
	ctrl     *gomock.Controller
	recorder *MockProcessMockRecorder
	isgomock struct{}
}

// MockProcessMockRecorder is the mock recorder for MockProcess.
type MockProcessMockRecorder struct {
	mock *MockProcess
}

// NewMockProcess creates a new mock instance.
func NewMockProcess(ctrl *gomock.Controller) *MockProcess {
	mock := &MockProcess{ctrl: ctrl}
	mock.recorder = &MockProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcess) EXPECT() *MockProcessMockRecorder {
	return m.recorder
}

// CloseIO mocks base method.
func (m *MockProcess) CloseIO(arg0 context.Context, arg1 ...client.IOCloserOpts) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseIO", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIO indicates an expected call of CloseIO.
func (mr *MockProcessMockRecorder) CloseIO(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIO", reflect.TypeOf((*MockProcess)(nil).CloseIO), varargs...)
}

// Delete mocks base method.
func (m *MockProcess) Delete(arg0 context.Context, arg1 ...client.ProcessDeleteOpts) (*client.ExitStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*client.ExitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProcessMockRecorder) Delete(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProcess)(nil).Delete), varargs...)
}

// ID mocks base method.
func (m *MockProcess) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockProcessMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockProcess)(nil).ID))
}

// IO mocks base method.
func (m *MockProcess) IO() cio.IO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IO")
	ret0, _ := ret[0].(cio.IO)
	return ret0
}

// IO indicates an expected call of IO.
func (mr *MockProcessMockRecorder) IO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IO", reflect.TypeOf((*MockProcess)(nil).IO))
}

// Kill mocks base method.
func (m *MockProcess) Kill(arg0 context.Context, arg1 syscall.Signal, arg2 ...client.KillOpts) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Kill", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockProcessMockRecorder) Kill(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockProcess)(nil).Kill), varargs...)
}

// Pid mocks base method.
func (m *MockProcess) Pid() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockProcessMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockProcess)(nil).Pid))
}

// Resize mocks base method.
func (m *MockProcess) Resize(ctx context.Context, w, h uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", ctx, w, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockProcessMockRecorder) Resize(ctx, w, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockProcess)(nil).Resize), ctx, w, h)
}

// Start mocks base method.
func (m *MockProcess) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProcessMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcess)(nil).Start), arg0)
}

// Status mocks base method.
func (m *MockProcess) Status(arg0 context.Context) (client.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(client.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockProcessMockRecorder) Status(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockProcess)(nil).Status), arg0)
}

// Wait mocks base method.
func (m *MockProcess) Wait(arg0 context.Context) (<-chan client.ExitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(<-chan client.ExitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockProcessMockRecorder) Wait(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockProcess)(nil).Wait), arg0)
}
