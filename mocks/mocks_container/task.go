// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/containerd/containerd/v2/client (interfaces: Task)
//
// Generated by this command:
//
//	mockgen --destination=./mocks/mocks_container/task.go -package=mocks_container github.com/containerd/containerd/v2/client Task
//

// Package mocks_container is a generated GoMock package.
package mocks_container

import (
	context "context"
	reflect "reflect"
	syscall "syscall"

	types "github.com/containerd/containerd/api/types"
	client "github.com/containerd/containerd/v2/client"
	cio "github.com/containerd/containerd/v2/pkg/cio"
	oci "github.com/containerd/containerd/v2/pkg/oci"
	specs "github.com/opencontainers/runtime-spec/specs-go"
	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
	isgomock struct{}
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Checkpoint mocks base method.
func (m *MockTask) Checkpoint(arg0 context.Context, arg1 ...client.CheckpointTaskOpts) (client.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Checkpoint", varargs...)
	ret0, _ := ret[0].(client.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockTaskMockRecorder) Checkpoint(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockTask)(nil).Checkpoint), varargs...)
}

// CloseIO mocks base method.
func (m *MockTask) CloseIO(arg0 context.Context, arg1 ...client.IOCloserOpts) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseIO", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIO indicates an expected call of CloseIO.
func (mr *MockTaskMockRecorder) CloseIO(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIO", reflect.TypeOf((*MockTask)(nil).CloseIO), varargs...)
}

// Delete mocks base method.
func (m *MockTask) Delete(arg0 context.Context, arg1 ...client.ProcessDeleteOpts) (*client.ExitStatus, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*client.ExitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskMockRecorder) Delete(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTask)(nil).Delete), varargs...)
}

// Exec mocks base method.
func (m *MockTask) Exec(arg0 context.Context, arg1 string, arg2 *specs.Process, arg3 cio.Creator) (client.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTaskMockRecorder) Exec(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTask)(nil).Exec), arg0, arg1, arg2, arg3)
}

// ID mocks base method.
func (m *MockTask) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTaskMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTask)(nil).ID))
}

// IO mocks base method.
func (m *MockTask) IO() cio.IO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IO")
	ret0, _ := ret[0].(cio.IO)
	return ret0
}

// IO indicates an expected call of IO.
func (mr *MockTaskMockRecorder) IO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IO", reflect.TypeOf((*MockTask)(nil).IO))
}

// Kill mocks base method.
func (m *MockTask) Kill(arg0 context.Context, arg1 syscall.Signal, arg2 ...client.KillOpts) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Kill", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockTaskMockRecorder) Kill(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTask)(nil).Kill), varargs...)
}

// LoadProcess mocks base method.
func (m *MockTask) LoadProcess(arg0 context.Context, arg1 string, arg2 cio.Attach) (client.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProcess", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProcess indicates an expected call of LoadProcess.
func (mr *MockTaskMockRecorder) LoadProcess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProcess", reflect.TypeOf((*MockTask)(nil).LoadProcess), arg0, arg1, arg2)
}

// Metrics mocks base method.
func (m *MockTask) Metrics(arg0 context.Context) (*types.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics", arg0)
	ret0, _ := ret[0].(*types.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metrics indicates an expected call of Metrics.
func (mr *MockTaskMockRecorder) Metrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockTask)(nil).Metrics), arg0)
}

// Pause mocks base method.
func (m *MockTask) Pause(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockTaskMockRecorder) Pause(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockTask)(nil).Pause), arg0)
}

// Pid mocks base method.
func (m *MockTask) Pid() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pid")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Pid indicates an expected call of Pid.
func (mr *MockTaskMockRecorder) Pid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pid", reflect.TypeOf((*MockTask)(nil).Pid))
}

// Pids mocks base method.
func (m *MockTask) Pids(arg0 context.Context) ([]client.ProcessInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pids", arg0)
	ret0, _ := ret[0].([]client.ProcessInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pids indicates an expected call of Pids.
func (mr *MockTaskMockRecorder) Pids(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pids", reflect.TypeOf((*MockTask)(nil).Pids), arg0)
}

// Resize mocks base method.
func (m *MockTask) Resize(ctx context.Context, w, h uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", ctx, w, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockTaskMockRecorder) Resize(ctx, w, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockTask)(nil).Resize), ctx, w, h)
}

// Resume mocks base method.
func (m *MockTask) Resume(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockTaskMockRecorder) Resume(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockTask)(nil).Resume), arg0)
}

// Spec mocks base method.
func (m *MockTask) Spec(arg0 context.Context) (*oci.Spec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec", arg0)
	ret0, _ := ret[0].(*oci.Spec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spec indicates an expected call of Spec.
func (mr *MockTaskMockRecorder) Spec(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockTask)(nil).Spec), arg0)
}

// Start mocks base method.
func (m *MockTask) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTaskMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTask)(nil).Start), arg0)
}

// Status mocks base method.
func (m *MockTask) Status(arg0 context.Context) (client.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(client.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockTaskMockRecorder) Status(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTask)(nil).Status), arg0)
}

// Update mocks base method.
func (m *MockTask) Update(arg0 context.Context, arg1 ...client.UpdateTaskOpts) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskMockRecorder) Update(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTask)(nil).Update), varargs...)
}

// Wait mocks base method.
func (m *MockTask) Wait(arg0 context.Context) (<-chan client.ExitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(<-chan client.ExitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockTaskMockRecorder) Wait(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTask)(nil).Wait), arg0)
}
