// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/archive (interfaces: TarCreator)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_archive/tarcreator.go -package=mocks_archive github.com/runfinch/finch-daemon/pkg/archive TarCreator
//

// Package mocks_archive is a generated GoMock package.
package mocks_archive

import (
	reflect "reflect"

	ecc "github.com/runfinch/finch-daemon/pkg/ecc"
	gomock "go.uber.org/mock/gomock"
)

// MockTarCreator is a mock of TarCreator interface.
type MockTarCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTarCreatorMockRecorder
	isgomock struct{}
}

// MockTarCreatorMockRecorder is the mock recorder for MockTarCreator.
type MockTarCreatorMockRecorder struct {
	mock *MockTarCreator
}

// NewMockTarCreator creates a new mock instance.
func NewMockTarCreator(ctrl *gomock.Controller) *MockTarCreator {
	mock := &MockTarCreator{ctrl: ctrl}
	mock.recorder = &MockTarCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarCreator) EXPECT() *MockTarCreatorMockRecorder {
	return m.recorder
}

// CreateTarCommand mocks base method.
func (m *MockTarCreator) CreateTarCommand(srcPath string, slashDot bool) (ecc.ExecCmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTarCommand", srcPath, slashDot)
	ret0, _ := ret[0].(ecc.ExecCmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTarCommand indicates an expected call of CreateTarCommand.
func (mr *MockTarCreatorMockRecorder) CreateTarCommand(srcPath, slashDot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTarCommand", reflect.TypeOf((*MockTarCreator)(nil).CreateTarCommand), srcPath, slashDot)
}
