// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: NerdctlNetworkSvc)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_backend/nerdctlnetworksvc.go -package=mocks_backend github.com/runfinch/finch-daemon/internal/backend NerdctlNetworkSvc
//

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	reflect "reflect"

	types "github.com/containerd/nerdctl/v2/pkg/api/types"
	dockercompat "github.com/containerd/nerdctl/v2/pkg/inspecttypes/dockercompat"
	netutil "github.com/containerd/nerdctl/v2/pkg/netutil"
	libcni "github.com/containernetworking/cni/libcni"
	types0 "github.com/containernetworking/cni/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockNerdctlNetworkSvc is a mock of NerdctlNetworkSvc interface.
type MockNerdctlNetworkSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlNetworkSvcMockRecorder
	isgomock struct{}
}

// MockNerdctlNetworkSvcMockRecorder is the mock recorder for MockNerdctlNetworkSvc.
type MockNerdctlNetworkSvcMockRecorder struct {
	mock *MockNerdctlNetworkSvc
}

// NewMockNerdctlNetworkSvc creates a new mock instance.
func NewMockNerdctlNetworkSvc(ctrl *gomock.Controller) *MockNerdctlNetworkSvc {
	mock := &MockNerdctlNetworkSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlNetworkSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlNetworkSvc) EXPECT() *MockNerdctlNetworkSvcMockRecorder {
	return m.recorder
}

// AddNetworkList mocks base method.
func (m *MockNerdctlNetworkSvc) AddNetworkList(ctx context.Context, netconflist *libcni.NetworkConfigList, conf *libcni.RuntimeConf) (types0.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNetworkList", ctx, netconflist, conf)
	ret0, _ := ret[0].(types0.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNetworkList indicates an expected call of AddNetworkList.
func (mr *MockNerdctlNetworkSvcMockRecorder) AddNetworkList(ctx, netconflist, conf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkList", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).AddNetworkList), ctx, netconflist, conf)
}

// CreateNetwork mocks base method.
func (m *MockNerdctlNetworkSvc) CreateNetwork(opts types.NetworkCreateOptions) (*netutil.NetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", opts)
	ret0, _ := ret[0].(*netutil.NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNerdctlNetworkSvcMockRecorder) CreateNetwork(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).CreateNetwork), opts)
}

// FilterNetworks mocks base method.
func (m *MockNerdctlNetworkSvc) FilterNetworks(filterf func(*netutil.NetworkConfig) bool) ([]*netutil.NetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNetworks", filterf)
	ret0, _ := ret[0].([]*netutil.NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNetworks indicates an expected call of FilterNetworks.
func (mr *MockNerdctlNetworkSvcMockRecorder) FilterNetworks(filterf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNetworks", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).FilterNetworks), filterf)
}

// InspectNetwork mocks base method.
func (m *MockNerdctlNetworkSvc) InspectNetwork(ctx context.Context, networkConfig *netutil.NetworkConfig) (*dockercompat.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectNetwork", ctx, networkConfig)
	ret0, _ := ret[0].(*dockercompat.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectNetwork indicates an expected call of InspectNetwork.
func (mr *MockNerdctlNetworkSvcMockRecorder) InspectNetwork(ctx, networkConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectNetwork", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).InspectNetwork), ctx, networkConfig)
}

// Namespace mocks base method.
func (m *MockNerdctlNetworkSvc) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockNerdctlNetworkSvcMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).Namespace))
}

// NetconfPath mocks base method.
func (m *MockNerdctlNetworkSvc) NetconfPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetconfPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// NetconfPath indicates an expected call of NetconfPath.
func (mr *MockNerdctlNetworkSvcMockRecorder) NetconfPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetconfPath", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).NetconfPath))
}

// RemoveNetwork mocks base method.
func (m *MockNerdctlNetworkSvc) RemoveNetwork(networkConfig *netutil.NetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNetwork", networkConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNetwork indicates an expected call of RemoveNetwork.
func (mr *MockNerdctlNetworkSvcMockRecorder) RemoveNetwork(networkConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetwork", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).RemoveNetwork), networkConfig)
}

// UsedNetworkInfo mocks base method.
func (m *MockNerdctlNetworkSvc) UsedNetworkInfo(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsedNetworkInfo", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsedNetworkInfo indicates an expected call of UsedNetworkInfo.
func (mr *MockNerdctlNetworkSvcMockRecorder) UsedNetworkInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsedNetworkInfo", reflect.TypeOf((*MockNerdctlNetworkSvc)(nil).UsedNetworkInfo), ctx)
}
