// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: NerdctlImageSvc)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_backend/nerdctlimagesvc.go -package=mocks_backend github.com/runfinch/finch-daemon/internal/backend NerdctlImageSvc
//

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	io "io"
	reflect "reflect"

	images "github.com/containerd/containerd/v2/core/images"
	remotes "github.com/containerd/containerd/v2/core/remotes"
	docker "github.com/containerd/containerd/v2/core/remotes/docker"
	imgutil "github.com/containerd/nerdctl/v2/pkg/imgutil"
	dockerconfigresolver "github.com/containerd/nerdctl/v2/pkg/imgutil/dockerconfigresolver"
	dockercompat "github.com/containerd/nerdctl/v2/pkg/inspecttypes/dockercompat"
	platforms "github.com/containerd/platforms"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockNerdctlImageSvc is a mock of NerdctlImageSvc interface.
type MockNerdctlImageSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlImageSvcMockRecorder
	isgomock struct{}
}

// MockNerdctlImageSvcMockRecorder is the mock recorder for MockNerdctlImageSvc.
type MockNerdctlImageSvcMockRecorder struct {
	mock *MockNerdctlImageSvc
}

// NewMockNerdctlImageSvc creates a new mock instance.
func NewMockNerdctlImageSvc(ctrl *gomock.Controller) *MockNerdctlImageSvc {
	mock := &MockNerdctlImageSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlImageSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlImageSvc) EXPECT() *MockNerdctlImageSvcMockRecorder {
	return m.recorder
}

// GetDataStore mocks base method.
func (m *MockNerdctlImageSvc) GetDataStore() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataStore")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataStore indicates an expected call of GetDataStore.
func (mr *MockNerdctlImageSvcMockRecorder) GetDataStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataStore", reflect.TypeOf((*MockNerdctlImageSvc)(nil).GetDataStore))
}

// GetDockerResolver mocks base method.
func (m *MockNerdctlImageSvc) GetDockerResolver(ctx context.Context, refDomain string, creds dockerconfigresolver.AuthCreds) (remotes.Resolver, docker.StatusTracker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerResolver", ctx, refDomain, creds)
	ret0, _ := ret[0].(remotes.Resolver)
	ret1, _ := ret[1].(docker.StatusTracker)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDockerResolver indicates an expected call of GetDockerResolver.
func (mr *MockNerdctlImageSvcMockRecorder) GetDockerResolver(ctx, refDomain, creds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerResolver", reflect.TypeOf((*MockNerdctlImageSvc)(nil).GetDockerResolver), ctx, refDomain, creds)
}

// InspectImage mocks base method.
func (m *MockNerdctlImageSvc) InspectImage(ctx context.Context, image images.Image) (*dockercompat.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectImage", ctx, image)
	ret0, _ := ret[0].(*dockercompat.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectImage indicates an expected call of InspectImage.
func (mr *MockNerdctlImageSvcMockRecorder) InspectImage(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectImage", reflect.TypeOf((*MockNerdctlImageSvc)(nil).InspectImage), ctx, image)
}

// LoadImage mocks base method.
func (m *MockNerdctlImageSvc) LoadImage(ctx context.Context, img string, stdout io.Writer, quiet bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", ctx, img, stdout, quiet)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImage indicates an expected call of LoadImage.
func (mr *MockNerdctlImageSvcMockRecorder) LoadImage(ctx, img, stdout, quiet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockNerdctlImageSvc)(nil).LoadImage), ctx, img, stdout, quiet)
}

// Namespace mocks base method.
func (m *MockNerdctlImageSvc) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockNerdctlImageSvcMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockNerdctlImageSvc)(nil).Namespace))
}

// PullImage mocks base method.
func (m *MockNerdctlImageSvc) PullImage(ctx context.Context, stdout, stderr io.Writer, resolver remotes.Resolver, ref string, arg5 []v1.Platform) (*imgutil.EnsuredImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", ctx, stdout, stderr, resolver, ref, arg5)
	ret0, _ := ret[0].(*imgutil.EnsuredImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage.
func (mr *MockNerdctlImageSvcMockRecorder) PullImage(ctx, stdout, stderr, resolver, ref, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockNerdctlImageSvc)(nil).PullImage), ctx, stdout, stderr, resolver, ref, arg5)
}

// PushImage mocks base method.
func (m *MockNerdctlImageSvc) PushImage(ctx context.Context, resolver remotes.Resolver, tracker docker.StatusTracker, stdout io.Writer, pushRef, ref string, platMC platforms.MatchComparer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushImage", ctx, resolver, tracker, stdout, pushRef, ref, platMC)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage.
func (mr *MockNerdctlImageSvcMockRecorder) PushImage(ctx, resolver, tracker, stdout, pushRef, ref, platMC any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImage", reflect.TypeOf((*MockNerdctlImageSvc)(nil).PushImage), ctx, resolver, tracker, stdout, pushRef, ref, platMC)
}

// SearchImage mocks base method.
func (m *MockNerdctlImageSvc) SearchImage(ctx context.Context, name string) (int, int, []*images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImage", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].([]*images.Image)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SearchImage indicates an expected call of SearchImage.
func (mr *MockNerdctlImageSvcMockRecorder) SearchImage(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImage", reflect.TypeOf((*MockNerdctlImageSvc)(nil).SearchImage), ctx, name)
}
