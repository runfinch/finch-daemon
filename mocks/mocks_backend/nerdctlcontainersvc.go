// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: NerdctlContainerSvc)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_backend/nerdctlcontainersvc.go -package=mocks_backend github.com/runfinch/finch-daemon/internal/backend NerdctlContainerSvc
//

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	io "io"
	os "os"
	reflect "reflect"

	client "github.com/containerd/containerd/v2/client"
	types "github.com/containerd/nerdctl/v2/pkg/api/types"
	container "github.com/containerd/nerdctl/v2/pkg/cmd/container"
	containerutil "github.com/containerd/nerdctl/v2/pkg/containerutil"
	dockercompat "github.com/containerd/nerdctl/v2/pkg/inspecttypes/dockercompat"
	native "github.com/containerd/nerdctl/v2/pkg/inspecttypes/native"
	logging "github.com/containerd/nerdctl/v2/pkg/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockNerdctlContainerSvc is a mock of NerdctlContainerSvc interface.
type MockNerdctlContainerSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlContainerSvcMockRecorder
	isgomock struct{}
}

// MockNerdctlContainerSvcMockRecorder is the mock recorder for MockNerdctlContainerSvc.
type MockNerdctlContainerSvcMockRecorder struct {
	mock *MockNerdctlContainerSvc
}

// NewMockNerdctlContainerSvc creates a new mock instance.
func NewMockNerdctlContainerSvc(ctrl *gomock.Controller) *MockNerdctlContainerSvc {
	mock := &MockNerdctlContainerSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlContainerSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlContainerSvc) EXPECT() *MockNerdctlContainerSvcMockRecorder {
	return m.recorder
}

// ContainerWait mocks base method.
func (m *MockNerdctlContainerSvc) ContainerWait(ctx context.Context, cid string, options types.ContainerWaitOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerWait", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerWait indicates an expected call of ContainerWait.
func (mr *MockNerdctlContainerSvcMockRecorder) ContainerWait(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerWait", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).ContainerWait), ctx, cid, options)
}

// CreateContainer mocks base method.
func (m *MockNerdctlContainerSvc) CreateContainer(ctx context.Context, args []string, netManager containerutil.NetworkOptionsManager, options types.ContainerCreateOptions) (client.Container, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, args, netManager, options)
	ret0, _ := ret[0].(client.Container)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) CreateContainer(ctx, args, netManager, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).CreateContainer), ctx, args, netManager, options)
}

// GetDataStore mocks base method.
func (m *MockNerdctlContainerSvc) GetDataStore() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataStore")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataStore indicates an expected call of GetDataStore.
func (mr *MockNerdctlContainerSvcMockRecorder) GetDataStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataStore", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).GetDataStore))
}

// GetNerdctlExe mocks base method.
func (m *MockNerdctlContainerSvc) GetNerdctlExe() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNerdctlExe")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNerdctlExe indicates an expected call of GetNerdctlExe.
func (mr *MockNerdctlContainerSvcMockRecorder) GetNerdctlExe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNerdctlExe", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).GetNerdctlExe))
}

// InspectContainer mocks base method.
func (m *MockNerdctlContainerSvc) InspectContainer(ctx context.Context, c client.Container, size bool) (*dockercompat.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectContainer", ctx, c, size)
	ret0, _ := ret[0].(*dockercompat.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectContainer indicates an expected call of InspectContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) InspectContainer(ctx, c, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).InspectContainer), ctx, c, size)
}

// InspectNetNS mocks base method.
func (m *MockNerdctlContainerSvc) InspectNetNS(ctx context.Context, pid int) (*native.NetNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectNetNS", ctx, pid)
	ret0, _ := ret[0].(*native.NetNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectNetNS indicates an expected call of InspectNetNS.
func (mr *MockNerdctlContainerSvcMockRecorder) InspectNetNS(ctx, pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectNetNS", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).InspectNetNS), ctx, pid)
}

// KillContainer mocks base method.
func (m *MockNerdctlContainerSvc) KillContainer(ctx context.Context, cid string, options types.ContainerKillOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillContainer", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillContainer indicates an expected call of KillContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) KillContainer(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).KillContainer), ctx, cid, options)
}

// ListContainers mocks base method.
func (m *MockNerdctlContainerSvc) ListContainers(ctx context.Context, options types.ContainerListOptions) ([]container.ListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContainers", ctx, options)
	ret0, _ := ret[0].([]container.ListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContainers indicates an expected call of ListContainers.
func (mr *MockNerdctlContainerSvcMockRecorder) ListContainers(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContainers", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).ListContainers), ctx, options)
}

// LoggingInitContainerLogViewer mocks base method.
func (m *MockNerdctlContainerSvc) LoggingInitContainerLogViewer(containerLabels map[string]string, lvopts logging.LogViewOptions, stopChannel chan os.Signal, experimental bool) (*logging.ContainerLogViewer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggingInitContainerLogViewer", containerLabels, lvopts, stopChannel, experimental)
	ret0, _ := ret[0].(*logging.ContainerLogViewer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoggingInitContainerLogViewer indicates an expected call of LoggingInitContainerLogViewer.
func (mr *MockNerdctlContainerSvcMockRecorder) LoggingInitContainerLogViewer(containerLabels, lvopts, stopChannel, experimental any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingInitContainerLogViewer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).LoggingInitContainerLogViewer), containerLabels, lvopts, stopChannel, experimental)
}

// LoggingPrintLogsTo mocks base method.
func (m *MockNerdctlContainerSvc) LoggingPrintLogsTo(stdout, stderr io.Writer, clv *logging.ContainerLogViewer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggingPrintLogsTo", stdout, stderr, clv)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoggingPrintLogsTo indicates an expected call of LoggingPrintLogsTo.
func (mr *MockNerdctlContainerSvcMockRecorder) LoggingPrintLogsTo(stdout, stderr, clv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggingPrintLogsTo", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).LoggingPrintLogsTo), stdout, stderr, clv)
}

// NewNetworkingOptionsManager mocks base method.
func (m *MockNerdctlContainerSvc) NewNetworkingOptionsManager(arg0 types.NetworkOptions) (containerutil.NetworkOptionsManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNetworkingOptionsManager", arg0)
	ret0, _ := ret[0].(containerutil.NetworkOptionsManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNetworkingOptionsManager indicates an expected call of NewNetworkingOptionsManager.
func (mr *MockNerdctlContainerSvcMockRecorder) NewNetworkingOptionsManager(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNetworkingOptionsManager", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).NewNetworkingOptionsManager), arg0)
}

// PauseContainer mocks base method.
func (m *MockNerdctlContainerSvc) PauseContainer(ctx context.Context, cid string, options types.ContainerPauseOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseContainer", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseContainer indicates an expected call of PauseContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) PauseContainer(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).PauseContainer), ctx, cid, options)
}

// RemoveContainer mocks base method.
func (m *MockNerdctlContainerSvc) RemoveContainer(ctx context.Context, c client.Container, force, removeAnonVolumes bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", ctx, c, force, removeAnonVolumes)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) RemoveContainer(ctx, c, force, removeAnonVolumes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).RemoveContainer), ctx, c, force, removeAnonVolumes)
}

// RenameContainer mocks base method.
func (m *MockNerdctlContainerSvc) RenameContainer(ctx context.Context, arg1 client.Container, newName string, options types.ContainerRenameOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", ctx, arg1, newName, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameContainer indicates an expected call of RenameContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) RenameContainer(ctx, arg1, newName, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).RenameContainer), ctx, arg1, newName, options)
}

// StartContainer mocks base method.
func (m *MockNerdctlContainerSvc) StartContainer(ctx context.Context, cid string, options types.ContainerStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) StartContainer(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).StartContainer), ctx, cid, options)
}

// StopContainer mocks base method.
func (m *MockNerdctlContainerSvc) StopContainer(ctx context.Context, cid string, options types.ContainerStopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) StopContainer(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).StopContainer), ctx, cid, options)
}

// UnpauseContainer mocks base method.
func (m *MockNerdctlContainerSvc) UnpauseContainer(ctx context.Context, cid string, options types.ContainerUnpauseOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseContainer", ctx, cid, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseContainer indicates an expected call of UnpauseContainer.
func (mr *MockNerdctlContainerSvcMockRecorder) UnpauseContainer(ctx, cid, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseContainer", reflect.TypeOf((*MockNerdctlContainerSvc)(nil).UnpauseContainer), ctx, cid, options)
}
