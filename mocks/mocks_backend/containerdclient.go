// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: ContainerdClient)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_backend/containerdclient.go -package=mocks_backend github.com/runfinch/finch-daemon/internal/backend ContainerdClient
//

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	reflect "reflect"

	client "github.com/containerd/containerd/v2/client"
	events "github.com/containerd/containerd/v2/core/events"
	images "github.com/containerd/containerd/v2/core/images"
	converter "github.com/containerd/containerd/v2/core/images/converter"
	mount "github.com/containerd/containerd/v2/core/mount"
	cio "github.com/containerd/containerd/v2/pkg/cio"
	oci "github.com/containerd/containerd/v2/pkg/oci"
	platforms "github.com/containerd/platforms"
	digest "github.com/opencontainers/go-digest"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerdClient is a mock of ContainerdClient interface.
type MockContainerdClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerdClientMockRecorder
	isgomock struct{}
}

// MockContainerdClientMockRecorder is the mock recorder for MockContainerdClient.
type MockContainerdClientMockRecorder struct {
	mock *MockContainerdClient
}

// NewMockContainerdClient creates a new mock instance.
func NewMockContainerdClient(ctrl *gomock.Controller) *MockContainerdClient {
	mock := &MockContainerdClient{ctrl: ctrl}
	mock.recorder = &MockContainerdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerdClient) EXPECT() *MockContainerdClientMockRecorder {
	return m.recorder
}

// ConvertImage mocks base method.
func (m *MockContainerdClient) ConvertImage(ctx context.Context, dstRef, srcRef string, opts ...converter.Opt) (*images.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dstRef, srcRef}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertImage", varargs...)
	ret0, _ := ret[0].(*images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertImage indicates an expected call of ConvertImage.
func (mr *MockContainerdClientMockRecorder) ConvertImage(ctx, dstRef, srcRef any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dstRef, srcRef}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertImage", reflect.TypeOf((*MockContainerdClient)(nil).ConvertImage), varargs...)
}

// DefaultDockerHost mocks base method.
func (m *MockContainerdClient) DefaultDockerHost(refDomain string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultDockerHost", refDomain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultDockerHost indicates an expected call of DefaultDockerHost.
func (mr *MockContainerdClientMockRecorder) DefaultDockerHost(refDomain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultDockerHost", reflect.TypeOf((*MockContainerdClient)(nil).DefaultDockerHost), refDomain)
}

// DefaultPlatformSpec mocks base method.
func (m *MockContainerdClient) DefaultPlatformSpec() v1.Platform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPlatformSpec")
	ret0, _ := ret[0].(v1.Platform)
	return ret0
}

// DefaultPlatformSpec indicates an expected call of DefaultPlatformSpec.
func (mr *MockContainerdClientMockRecorder) DefaultPlatformSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPlatformSpec", reflect.TypeOf((*MockContainerdClient)(nil).DefaultPlatformSpec))
}

// DefaultPlatformStrict mocks base method.
func (m *MockContainerdClient) DefaultPlatformStrict() platforms.MatchComparer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPlatformStrict")
	ret0, _ := ret[0].(platforms.MatchComparer)
	return ret0
}

// DefaultPlatformStrict indicates an expected call of DefaultPlatformStrict.
func (mr *MockContainerdClientMockRecorder) DefaultPlatformStrict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPlatformStrict", reflect.TypeOf((*MockContainerdClient)(nil).DefaultPlatformStrict))
}

// DeleteImage mocks base method.
func (m *MockContainerdClient) DeleteImage(ctx context.Context, img string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockContainerdClientMockRecorder) DeleteImage(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockContainerdClient)(nil).DeleteImage), ctx, img)
}

// GetClient mocks base method.
func (m *MockContainerdClient) GetClient() *client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockContainerdClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockContainerdClient)(nil).GetClient))
}

// GetContainerRemoveEvent mocks base method.
func (m *MockContainerdClient) GetContainerRemoveEvent(ctx context.Context, c client.Container) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerRemoveEvent", ctx, c)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetContainerRemoveEvent indicates an expected call of GetContainerRemoveEvent.
func (mr *MockContainerdClientMockRecorder) GetContainerRemoveEvent(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerRemoveEvent", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerRemoveEvent), ctx, c)
}

// GetContainerStatus mocks base method.
func (m *MockContainerdClient) GetContainerStatus(ctx context.Context, c client.Container) client.ProcessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerStatus", ctx, c)
	ret0, _ := ret[0].(client.ProcessStatus)
	return ret0
}

// GetContainerStatus indicates an expected call of GetContainerStatus.
func (mr *MockContainerdClientMockRecorder) GetContainerStatus(ctx, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerStatus", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerStatus), ctx, c)
}

// GetContainerTaskWait mocks base method.
func (m *MockContainerdClient) GetContainerTaskWait(ctx context.Context, attach cio.Attach, c client.Container) (client.Task, <-chan client.ExitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTaskWait", ctx, attach, c)
	ret0, _ := ret[0].(client.Task)
	ret1, _ := ret[1].(<-chan client.ExitStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerTaskWait indicates an expected call of GetContainerTaskWait.
func (mr *MockContainerdClientMockRecorder) GetContainerTaskWait(ctx, attach, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTaskWait", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerTaskWait), ctx, attach, c)
}

// GetCurrentCapabilities mocks base method.
func (m *MockContainerdClient) GetCurrentCapabilities() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCapabilities")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCapabilities indicates an expected call of GetCurrentCapabilities.
func (mr *MockContainerdClientMockRecorder) GetCurrentCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCapabilities", reflect.TypeOf((*MockContainerdClient)(nil).GetCurrentCapabilities))
}

// GetImage mocks base method.
func (m *MockContainerdClient) GetImage(ctx context.Context, ref string) (client.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, ref)
	ret0, _ := ret[0].(client.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockContainerdClientMockRecorder) GetImage(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockContainerdClient)(nil).GetImage), ctx, ref)
}

// GetImageDigests mocks base method.
func (m *MockContainerdClient) GetImageDigests(ctx context.Context, img *images.Image) ([]digest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageDigests", ctx, img)
	ret0, _ := ret[0].([]digest.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageDigests indicates an expected call of GetImageDigests.
func (mr *MockContainerdClientMockRecorder) GetImageDigests(ctx, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageDigests", reflect.TypeOf((*MockContainerdClient)(nil).GetImageDigests), ctx, img)
}

// GetUsedImages mocks base method.
func (m *MockContainerdClient) GetUsedImages(ctx context.Context) (map[string]string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedImages", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsedImages indicates an expected call of GetUsedImages.
func (mr *MockContainerdClientMockRecorder) GetUsedImages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedImages", reflect.TypeOf((*MockContainerdClient)(nil).GetUsedImages), ctx)
}

// ImageService mocks base method.
func (m *MockContainerdClient) ImageService() images.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageService")
	ret0, _ := ret[0].(images.Store)
	return ret0
}

// ImageService indicates an expected call of ImageService.
func (mr *MockContainerdClientMockRecorder) ImageService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageService", reflect.TypeOf((*MockContainerdClient)(nil).ImageService))
}

// ListSnapshotMounts mocks base method.
func (m *MockContainerdClient) ListSnapshotMounts(ctx context.Context, cid string) ([]mount.Mount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotMounts", ctx, cid)
	ret0, _ := ret[0].([]mount.Mount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotMounts indicates an expected call of ListSnapshotMounts.
func (mr *MockContainerdClientMockRecorder) ListSnapshotMounts(ctx, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotMounts", reflect.TypeOf((*MockContainerdClient)(nil).ListSnapshotMounts), ctx, cid)
}

// MountAll mocks base method.
func (m *MockContainerdClient) MountAll(mounts []mount.Mount, mPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountAll", mounts, mPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountAll indicates an expected call of MountAll.
func (mr *MockContainerdClientMockRecorder) MountAll(mounts, mPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountAll", reflect.TypeOf((*MockContainerdClient)(nil).MountAll), mounts, mPath)
}

// NewDirectCIO mocks base method.
func (m *MockContainerdClient) NewDirectCIO(ctx context.Context, fifos *cio.FIFOSet) (*cio.DirectIO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDirectCIO", ctx, fifos)
	ret0, _ := ret[0].(*cio.DirectIO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDirectCIO indicates an expected call of NewDirectCIO.
func (mr *MockContainerdClientMockRecorder) NewDirectCIO(ctx, fifos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDirectCIO", reflect.TypeOf((*MockContainerdClient)(nil).NewDirectCIO), ctx, fifos)
}

// NewFIFOSetInDir mocks base method.
func (m *MockContainerdClient) NewFIFOSetInDir(root, id string, terminal bool) (*cio.FIFOSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFIFOSetInDir", root, id, terminal)
	ret0, _ := ret[0].(*cio.FIFOSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFIFOSetInDir indicates an expected call of NewFIFOSetInDir.
func (mr *MockContainerdClientMockRecorder) NewFIFOSetInDir(root, id, terminal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFIFOSetInDir", reflect.TypeOf((*MockContainerdClient)(nil).NewFIFOSetInDir), root, id, terminal)
}

// OCISpecWithAdditionalGIDs mocks base method.
func (m *MockContainerdClient) OCISpecWithAdditionalGIDs(user string) oci.SpecOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCISpecWithAdditionalGIDs", user)
	ret0, _ := ret[0].(oci.SpecOpts)
	return ret0
}

// OCISpecWithAdditionalGIDs indicates an expected call of OCISpecWithAdditionalGIDs.
func (mr *MockContainerdClientMockRecorder) OCISpecWithAdditionalGIDs(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCISpecWithAdditionalGIDs", reflect.TypeOf((*MockContainerdClient)(nil).OCISpecWithAdditionalGIDs), user)
}

// OCISpecWithUser mocks base method.
func (m *MockContainerdClient) OCISpecWithUser(user string) oci.SpecOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCISpecWithUser", user)
	ret0, _ := ret[0].(oci.SpecOpts)
	return ret0
}

// OCISpecWithUser indicates an expected call of OCISpecWithUser.
func (mr *MockContainerdClientMockRecorder) OCISpecWithUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCISpecWithUser", reflect.TypeOf((*MockContainerdClient)(nil).OCISpecWithUser), user)
}

// ParseDockerRef mocks base method.
func (m *MockContainerdClient) ParseDockerRef(rawRef string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseDockerRef", rawRef)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseDockerRef indicates an expected call of ParseDockerRef.
func (mr *MockContainerdClientMockRecorder) ParseDockerRef(rawRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDockerRef", reflect.TypeOf((*MockContainerdClient)(nil).ParseDockerRef), rawRef)
}

// ParsePlatform mocks base method.
func (m *MockContainerdClient) ParsePlatform(platform string) (v1.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePlatform", platform)
	ret0, _ := ret[0].(v1.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePlatform indicates an expected call of ParsePlatform.
func (mr *MockContainerdClientMockRecorder) ParsePlatform(platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePlatform", reflect.TypeOf((*MockContainerdClient)(nil).ParsePlatform), platform)
}

// PublishEvent mocks base method.
func (m *MockContainerdClient) PublishEvent(ctx context.Context, topic string, event events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", ctx, topic, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockContainerdClientMockRecorder) PublishEvent(ctx, topic, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockContainerdClient)(nil).PublishEvent), ctx, topic, event)
}

// SearchContainer mocks base method.
func (m *MockContainerdClient) SearchContainer(ctx context.Context, searchText string) ([]client.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContainer", ctx, searchText)
	ret0, _ := ret[0].([]client.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContainer indicates an expected call of SearchContainer.
func (mr *MockContainerdClientMockRecorder) SearchContainer(ctx, searchText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContainer", reflect.TypeOf((*MockContainerdClient)(nil).SearchContainer), ctx, searchText)
}

// SearchImage mocks base method.
func (m *MockContainerdClient) SearchImage(ctx context.Context, searchText string) ([]images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImage", ctx, searchText)
	ret0, _ := ret[0].([]images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImage indicates an expected call of SearchImage.
func (mr *MockContainerdClientMockRecorder) SearchImage(ctx, searchText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImage", reflect.TypeOf((*MockContainerdClient)(nil).SearchImage), ctx, searchText)
}

// SubscribeToEvents mocks base method.
func (m *MockContainerdClient) SubscribeToEvents(ctx context.Context, filters ...string) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToEvents", varargs...)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockContainerdClientMockRecorder) SubscribeToEvents(ctx any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockContainerdClient)(nil).SubscribeToEvents), varargs...)
}

// Unmount mocks base method.
func (m *MockContainerdClient) Unmount(mPath string, flags int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", mPath, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockContainerdClientMockRecorder) Unmount(mPath, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockContainerdClient)(nil).Unmount), mPath, flags)
}
