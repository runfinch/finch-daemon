// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: ContainerdClient)

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	reflect "reflect"

	containerd "github.com/containerd/containerd"
	cio "github.com/containerd/containerd/cio"
	events "github.com/containerd/containerd/events"
	images "github.com/containerd/containerd/images"
	converter "github.com/containerd/containerd/images/converter"
	mount "github.com/containerd/containerd/mount"
	oci "github.com/containerd/containerd/oci"
	platforms "github.com/containerd/platforms"
	gomock "github.com/golang/mock/gomock"
	digest "github.com/opencontainers/go-digest"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
)

// MockContainerdClient is a mock of ContainerdClient interface.
type MockContainerdClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerdClientMockRecorder
}

// MockContainerdClientMockRecorder is the mock recorder for MockContainerdClient.
type MockContainerdClientMockRecorder struct {
	mock *MockContainerdClient
}

// NewMockContainerdClient creates a new mock instance.
func NewMockContainerdClient(ctrl *gomock.Controller) *MockContainerdClient {
	mock := &MockContainerdClient{ctrl: ctrl}
	mock.recorder = &MockContainerdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerdClient) EXPECT() *MockContainerdClientMockRecorder {
	return m.recorder
}

// ConvertImage mocks base method.
func (m *MockContainerdClient) ConvertImage(arg0 context.Context, arg1, arg2 string, arg3 ...converter.Opt) (*images.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConvertImage", varargs...)
	ret0, _ := ret[0].(*images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertImage indicates an expected call of ConvertImage.
func (mr *MockContainerdClientMockRecorder) ConvertImage(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertImage", reflect.TypeOf((*MockContainerdClient)(nil).ConvertImage), varargs...)
}

// DefaultDockerHost mocks base method.
func (m *MockContainerdClient) DefaultDockerHost(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultDockerHost", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultDockerHost indicates an expected call of DefaultDockerHost.
func (mr *MockContainerdClientMockRecorder) DefaultDockerHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultDockerHost", reflect.TypeOf((*MockContainerdClient)(nil).DefaultDockerHost), arg0)
}

// DefaultPlatformSpec mocks base method.
func (m *MockContainerdClient) DefaultPlatformSpec() v1.Platform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPlatformSpec")
	ret0, _ := ret[0].(v1.Platform)
	return ret0
}

// DefaultPlatformSpec indicates an expected call of DefaultPlatformSpec.
func (mr *MockContainerdClientMockRecorder) DefaultPlatformSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPlatformSpec", reflect.TypeOf((*MockContainerdClient)(nil).DefaultPlatformSpec))
}

// DefaultPlatformStrict mocks base method.
func (m *MockContainerdClient) DefaultPlatformStrict() platforms.MatchComparer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultPlatformStrict")
	ret0, _ := ret[0].(platforms.MatchComparer)
	return ret0
}

// DefaultPlatformStrict indicates an expected call of DefaultPlatformStrict.
func (mr *MockContainerdClientMockRecorder) DefaultPlatformStrict() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultPlatformStrict", reflect.TypeOf((*MockContainerdClient)(nil).DefaultPlatformStrict))
}

// DeleteImage mocks base method.
func (m *MockContainerdClient) DeleteImage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockContainerdClientMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockContainerdClient)(nil).DeleteImage), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockContainerdClient) GetClient() *containerd.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*containerd.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockContainerdClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockContainerdClient)(nil).GetClient))
}

// GetContainerRemoveEvent mocks base method.
func (m *MockContainerdClient) GetContainerRemoveEvent(arg0 context.Context, arg1 containerd.Container) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerRemoveEvent", arg0, arg1)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetContainerRemoveEvent indicates an expected call of GetContainerRemoveEvent.
func (mr *MockContainerdClientMockRecorder) GetContainerRemoveEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerRemoveEvent", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerRemoveEvent), arg0, arg1)
}

// GetContainerStatus mocks base method.
func (m *MockContainerdClient) GetContainerStatus(arg0 context.Context, arg1 containerd.Container) containerd.ProcessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerStatus", arg0, arg1)
	ret0, _ := ret[0].(containerd.ProcessStatus)
	return ret0
}

// GetContainerStatus indicates an expected call of GetContainerStatus.
func (mr *MockContainerdClientMockRecorder) GetContainerStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerStatus", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerStatus), arg0, arg1)
}

// GetContainerTaskWait mocks base method.
func (m *MockContainerdClient) GetContainerTaskWait(arg0 context.Context, arg1 cio.Attach, arg2 containerd.Container) (containerd.Task, <-chan containerd.ExitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTaskWait", arg0, arg1, arg2)
	ret0, _ := ret[0].(containerd.Task)
	ret1, _ := ret[1].(<-chan containerd.ExitStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerTaskWait indicates an expected call of GetContainerTaskWait.
func (mr *MockContainerdClientMockRecorder) GetContainerTaskWait(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTaskWait", reflect.TypeOf((*MockContainerdClient)(nil).GetContainerTaskWait), arg0, arg1, arg2)
}

// GetCurrentCapabilities mocks base method.
func (m *MockContainerdClient) GetCurrentCapabilities() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCapabilities")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCapabilities indicates an expected call of GetCurrentCapabilities.
func (mr *MockContainerdClientMockRecorder) GetCurrentCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCapabilities", reflect.TypeOf((*MockContainerdClient)(nil).GetCurrentCapabilities))
}

// GetImage mocks base method.
func (m *MockContainerdClient) GetImage(arg0 context.Context, arg1 string) (containerd.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0, arg1)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockContainerdClientMockRecorder) GetImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockContainerdClient)(nil).GetImage), arg0, arg1)
}

// GetImageDigests mocks base method.
func (m *MockContainerdClient) GetImageDigests(arg0 context.Context, arg1 *images.Image) ([]digest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageDigests", arg0, arg1)
	ret0, _ := ret[0].([]digest.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageDigests indicates an expected call of GetImageDigests.
func (mr *MockContainerdClientMockRecorder) GetImageDigests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageDigests", reflect.TypeOf((*MockContainerdClient)(nil).GetImageDigests), arg0, arg1)
}

// GetUsedImages mocks base method.
func (m *MockContainerdClient) GetUsedImages(arg0 context.Context) (map[string]string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsedImages", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsedImages indicates an expected call of GetUsedImages.
func (mr *MockContainerdClientMockRecorder) GetUsedImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsedImages", reflect.TypeOf((*MockContainerdClient)(nil).GetUsedImages), arg0)
}

// ImageService mocks base method.
func (m *MockContainerdClient) ImageService() images.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageService")
	ret0, _ := ret[0].(images.Store)
	return ret0
}

// ImageService indicates an expected call of ImageService.
func (mr *MockContainerdClientMockRecorder) ImageService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageService", reflect.TypeOf((*MockContainerdClient)(nil).ImageService))
}

// ListSnapshotMounts mocks base method.
func (m *MockContainerdClient) ListSnapshotMounts(arg0 context.Context, arg1 string) ([]mount.Mount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotMounts", arg0, arg1)
	ret0, _ := ret[0].([]mount.Mount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotMounts indicates an expected call of ListSnapshotMounts.
func (mr *MockContainerdClientMockRecorder) ListSnapshotMounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotMounts", reflect.TypeOf((*MockContainerdClient)(nil).ListSnapshotMounts), arg0, arg1)
}

// MountAll mocks base method.
func (m *MockContainerdClient) MountAll(arg0 []mount.Mount, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountAll indicates an expected call of MountAll.
func (mr *MockContainerdClientMockRecorder) MountAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountAll", reflect.TypeOf((*MockContainerdClient)(nil).MountAll), arg0, arg1)
}

// NewDirectCIO mocks base method.
func (m *MockContainerdClient) NewDirectCIO(arg0 context.Context, arg1 *cio.FIFOSet) (*cio.DirectIO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDirectCIO", arg0, arg1)
	ret0, _ := ret[0].(*cio.DirectIO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDirectCIO indicates an expected call of NewDirectCIO.
func (mr *MockContainerdClientMockRecorder) NewDirectCIO(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDirectCIO", reflect.TypeOf((*MockContainerdClient)(nil).NewDirectCIO), arg0, arg1)
}

// NewFIFOSetInDir mocks base method.
func (m *MockContainerdClient) NewFIFOSetInDir(arg0, arg1 string, arg2 bool) (*cio.FIFOSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFIFOSetInDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(*cio.FIFOSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFIFOSetInDir indicates an expected call of NewFIFOSetInDir.
func (mr *MockContainerdClientMockRecorder) NewFIFOSetInDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFIFOSetInDir", reflect.TypeOf((*MockContainerdClient)(nil).NewFIFOSetInDir), arg0, arg1, arg2)
}

// OCISpecWithAdditionalGIDs mocks base method.
func (m *MockContainerdClient) OCISpecWithAdditionalGIDs(arg0 string) oci.SpecOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCISpecWithAdditionalGIDs", arg0)
	ret0, _ := ret[0].(oci.SpecOpts)
	return ret0
}

// OCISpecWithAdditionalGIDs indicates an expected call of OCISpecWithAdditionalGIDs.
func (mr *MockContainerdClientMockRecorder) OCISpecWithAdditionalGIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCISpecWithAdditionalGIDs", reflect.TypeOf((*MockContainerdClient)(nil).OCISpecWithAdditionalGIDs), arg0)
}

// OCISpecWithUser mocks base method.
func (m *MockContainerdClient) OCISpecWithUser(arg0 string) oci.SpecOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCISpecWithUser", arg0)
	ret0, _ := ret[0].(oci.SpecOpts)
	return ret0
}

// OCISpecWithUser indicates an expected call of OCISpecWithUser.
func (mr *MockContainerdClientMockRecorder) OCISpecWithUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCISpecWithUser", reflect.TypeOf((*MockContainerdClient)(nil).OCISpecWithUser), arg0)
}

// ParseDockerRef mocks base method.
func (m *MockContainerdClient) ParseDockerRef(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseDockerRef", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseDockerRef indicates an expected call of ParseDockerRef.
func (mr *MockContainerdClientMockRecorder) ParseDockerRef(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDockerRef", reflect.TypeOf((*MockContainerdClient)(nil).ParseDockerRef), arg0)
}

// ParsePlatform mocks base method.
func (m *MockContainerdClient) ParsePlatform(arg0 string) (v1.Platform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePlatform", arg0)
	ret0, _ := ret[0].(v1.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePlatform indicates an expected call of ParsePlatform.
func (mr *MockContainerdClientMockRecorder) ParsePlatform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePlatform", reflect.TypeOf((*MockContainerdClient)(nil).ParsePlatform), arg0)
}

// PublishEvent mocks base method.
func (m *MockContainerdClient) PublishEvent(arg0 context.Context, arg1 string, arg2 events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockContainerdClientMockRecorder) PublishEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockContainerdClient)(nil).PublishEvent), arg0, arg1, arg2)
}

// SearchContainer mocks base method.
func (m *MockContainerdClient) SearchContainer(arg0 context.Context, arg1 string) ([]containerd.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchContainer", arg0, arg1)
	ret0, _ := ret[0].([]containerd.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchContainer indicates an expected call of SearchContainer.
func (mr *MockContainerdClientMockRecorder) SearchContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchContainer", reflect.TypeOf((*MockContainerdClient)(nil).SearchContainer), arg0, arg1)
}

// SearchImage mocks base method.
func (m *MockContainerdClient) SearchImage(arg0 context.Context, arg1 string) ([]images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchImage", arg0, arg1)
	ret0, _ := ret[0].([]images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchImage indicates an expected call of SearchImage.
func (mr *MockContainerdClientMockRecorder) SearchImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchImage", reflect.TypeOf((*MockContainerdClient)(nil).SearchImage), arg0, arg1)
}

// SubscribeToEvents mocks base method.
func (m *MockContainerdClient) SubscribeToEvents(arg0 context.Context, arg1 ...string) (<-chan *events.Envelope, <-chan error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeToEvents", varargs...)
	ret0, _ := ret[0].(<-chan *events.Envelope)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockContainerdClientMockRecorder) SubscribeToEvents(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockContainerdClient)(nil).SubscribeToEvents), varargs...)
}

// Unmount mocks base method.
func (m *MockContainerdClient) Unmount(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockContainerdClientMockRecorder) Unmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockContainerdClient)(nil).Unmount), arg0, arg1)
}
