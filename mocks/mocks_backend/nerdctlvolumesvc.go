// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/backend (interfaces: NerdctlVolumeSvc)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_backend/nerdctlvolumesvc.go -package=mocks_backend github.com/runfinch/finch-daemon/internal/backend NerdctlVolumeSvc
//

// Package mocks_backend is a generated GoMock package.
package mocks_backend

import (
	context "context"
	io "io"
	reflect "reflect"

	native "github.com/containerd/nerdctl/v2/pkg/inspecttypes/native"
	gomock "go.uber.org/mock/gomock"
)

// MockNerdctlVolumeSvc is a mock of NerdctlVolumeSvc interface.
type MockNerdctlVolumeSvc struct {
	ctrl     *gomock.Controller
	recorder *MockNerdctlVolumeSvcMockRecorder
	isgomock struct{}
}

// MockNerdctlVolumeSvcMockRecorder is the mock recorder for MockNerdctlVolumeSvc.
type MockNerdctlVolumeSvcMockRecorder struct {
	mock *MockNerdctlVolumeSvc
}

// NewMockNerdctlVolumeSvc creates a new mock instance.
func NewMockNerdctlVolumeSvc(ctrl *gomock.Controller) *MockNerdctlVolumeSvc {
	mock := &MockNerdctlVolumeSvc{ctrl: ctrl}
	mock.recorder = &MockNerdctlVolumeSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNerdctlVolumeSvc) EXPECT() *MockNerdctlVolumeSvcMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method.
func (m *MockNerdctlVolumeSvc) CreateVolume(name string, labels []string) (*native.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", name, labels)
	ret0, _ := ret[0].(*native.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockNerdctlVolumeSvcMockRecorder) CreateVolume(name, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockNerdctlVolumeSvc)(nil).CreateVolume), name, labels)
}

// GetVolume mocks base method.
func (m *MockNerdctlVolumeSvc) GetVolume(name string) (*native.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", name)
	ret0, _ := ret[0].(*native.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockNerdctlVolumeSvcMockRecorder) GetVolume(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockNerdctlVolumeSvc)(nil).GetVolume), name)
}

// ListVolumes mocks base method.
func (m *MockNerdctlVolumeSvc) ListVolumes(size bool, filters []string) (map[string]native.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", size, filters)
	ret0, _ := ret[0].(map[string]native.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockNerdctlVolumeSvcMockRecorder) ListVolumes(size, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockNerdctlVolumeSvc)(nil).ListVolumes), size, filters)
}

// RemoveVolume mocks base method.
func (m *MockNerdctlVolumeSvc) RemoveVolume(ctx context.Context, name string, force bool, stdout io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", ctx, name, force, stdout)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockNerdctlVolumeSvcMockRecorder) RemoveVolume(ctx, name, force, stdout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockNerdctlVolumeSvc)(nil).RemoveVolume), ctx, name, force, stdout)
}
