// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/api/handlers/exec (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --destination=../../../mocks/mocks_exec/execsvc.go -package=mocks_exec github.com/runfinch/finch-daemon/api/handlers/exec Service
//

// Package mocks_exec is a generated GoMock package.
package mocks_exec

import (
	context "context"
	reflect "reflect"

	types "github.com/runfinch/finch-daemon/api/types"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Inspect mocks base method.
func (m *MockService) Inspect(ctx context.Context, conId, execId string) (*types.ExecInspect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, conId, execId)
	ret0, _ := ret[0].(*types.ExecInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockServiceMockRecorder) Inspect(ctx, conId, execId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockService)(nil).Inspect), ctx, conId, execId)
}

// Resize mocks base method.
func (m *MockService) Resize(ctx context.Context, options *types.ExecResizeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize.
func (mr *MockServiceMockRecorder) Resize(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockService)(nil).Resize), ctx, options)
}

// Start mocks base method.
func (m *MockService) Start(ctx context.Context, options *types.ExecStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), ctx, options)
}
