// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/service/network/driver (interfaces: DriverHandler)

// Package mocks_network is a generated GoMock package.
package mocks_network

import (
	reflect "reflect"

	netutil "github.com/containerd/nerdctl/pkg/netutil"
	gomock "github.com/golang/mock/gomock"
	types "github.com/runfinch/finch-daemon/api/types"
)

// DriverHandler is a mock of DriverHandler interface.
type DriverHandler struct {
	ctrl     *gomock.Controller
	recorder *DriverHandlerMockRecorder
}

// DriverHandlerMockRecorder is the mock recorder for DriverHandler.
type DriverHandlerMockRecorder struct {
	mock *DriverHandler
}

// NewDriverHandler creates a new mock instance.
func NewDriverHandler(ctrl *gomock.Controller) *DriverHandler {
	mock := &DriverHandler{ctrl: ctrl}
	mock.recorder = &DriverHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DriverHandler) EXPECT() *DriverHandlerMockRecorder {
	return m.recorder
}

// HandleCreateOptions mocks base method.
func (m *DriverHandler) HandleCreateOptions(arg0 types.NetworkCreateRequest, arg1 netutil.CreateOptions) (netutil.CreateOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateOptions", arg0, arg1)
	ret0, _ := ret[0].(netutil.CreateOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCreateOptions indicates an expected call of HandleCreateOptions.
func (mr *DriverHandlerMockRecorder) HandleCreateOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateOptions", reflect.TypeOf((*DriverHandler)(nil).HandleCreateOptions), arg0, arg1)
}

// HandlePostCreate mocks base method.
func (m *DriverHandler) HandlePostCreate(arg0 *netutil.NetworkConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePostCreate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePostCreate indicates an expected call of HandlePostCreate.
func (mr *DriverHandlerMockRecorder) HandlePostCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePostCreate", reflect.TypeOf((*DriverHandler)(nil).HandlePostCreate), arg0)
}

// HandleRemove mocks base method.
func (m *DriverHandler) HandleRemove(arg0 *netutil.NetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRemove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRemove indicates an expected call of HandleRemove.
func (mr *DriverHandlerMockRecorder) HandleRemove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRemove", reflect.TypeOf((*DriverHandler)(nil).HandleRemove), arg0)
}
