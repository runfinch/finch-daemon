// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/service/network (interfaces: IPTablesWrapper)

// Package mocks_network is a generated GoMock package.
package mocks_network

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPTablesWrapper is a mock of IPTablesWrapper interface.
type MockIPTablesWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockIPTablesWrapperMockRecorder
}

// MockIPTablesWrapperMockRecorder is the mock recorder for MockIPTablesWrapper.
type MockIPTablesWrapperMockRecorder struct {
	mock *MockIPTablesWrapper
}

// NewMockIPTablesWrapper creates a new mock instance.
func NewMockIPTablesWrapper(ctrl *gomock.Controller) *MockIPTablesWrapper {
	mock := &MockIPTablesWrapper{ctrl: ctrl}
	mock.recorder = &MockIPTablesWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPTablesWrapper) EXPECT() *MockIPTablesWrapperMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockIPTablesWrapper) Append(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockIPTablesWrapperMockRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIPTablesWrapper)(nil).Append), varargs...)
}

// ChainExists mocks base method.
func (m *MockIPTablesWrapper) ChainExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainExists indicates an expected call of ChainExists.
func (mr *MockIPTablesWrapperMockRecorder) ChainExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainExists", reflect.TypeOf((*MockIPTablesWrapper)(nil).ChainExists), arg0, arg1)
}

// DeleteIfExists mocks base method.
func (m *MockIPTablesWrapper) DeleteIfExists(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIfExists", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIfExists indicates an expected call of DeleteIfExists.
func (mr *MockIPTablesWrapperMockRecorder) DeleteIfExists(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIfExists", reflect.TypeOf((*MockIPTablesWrapper)(nil).DeleteIfExists), varargs...)
}

// Insert mocks base method.
func (m *MockIPTablesWrapper) Insert(arg0, arg1 string, arg2 int, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIPTablesWrapperMockRecorder) Insert(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIPTablesWrapper)(nil).Insert), varargs...)
}

// NewChain mocks base method.
func (m *MockIPTablesWrapper) NewChain(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChain indicates an expected call of NewChain.
func (mr *MockIPTablesWrapperMockRecorder) NewChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChain", reflect.TypeOf((*MockIPTablesWrapper)(nil).NewChain), arg0, arg1)
}
