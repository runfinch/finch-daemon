// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/service/network/driver (interfaces: IPTablesWrapper)
//
// Generated by this command:
//
//	mockgen --destination=../../../../mocks/mocks_network/iptables.go -package=mocks_network . IPTablesWrapper
//

// Package mocks_network is a generated GoMock package.
package mocks_network

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPTablesWrapper is a mock of IPTablesWrapper interface.
type MockIPTablesWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockIPTablesWrapperMockRecorder
	isgomock struct{}
}

// MockIPTablesWrapperMockRecorder is the mock recorder for MockIPTablesWrapper.
type MockIPTablesWrapperMockRecorder struct {
	mock *MockIPTablesWrapper
}

// NewMockIPTablesWrapper creates a new mock instance.
func NewMockIPTablesWrapper(ctrl *gomock.Controller) *MockIPTablesWrapper {
	mock := &MockIPTablesWrapper{ctrl: ctrl}
	mock.recorder = &MockIPTablesWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPTablesWrapper) EXPECT() *MockIPTablesWrapperMockRecorder {
	return m.recorder
}

// AppendUnique mocks base method.
func (m *MockIPTablesWrapper) AppendUnique(table, chain string, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{table, chain}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendUnique", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendUnique indicates an expected call of AppendUnique.
func (mr *MockIPTablesWrapperMockRecorder) AppendUnique(table, chain any, rulespec ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{table, chain}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendUnique", reflect.TypeOf((*MockIPTablesWrapper)(nil).AppendUnique), varargs...)
}

// ChainExists mocks base method.
func (m *MockIPTablesWrapper) ChainExists(table, chain string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainExists", table, chain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainExists indicates an expected call of ChainExists.
func (mr *MockIPTablesWrapperMockRecorder) ChainExists(table, chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainExists", reflect.TypeOf((*MockIPTablesWrapper)(nil).ChainExists), table, chain)
}

// DeleteChain mocks base method.
func (m *MockIPTablesWrapper) DeleteChain(table, chain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChain indicates an expected call of DeleteChain.
func (mr *MockIPTablesWrapperMockRecorder) DeleteChain(table, chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChain", reflect.TypeOf((*MockIPTablesWrapper)(nil).DeleteChain), table, chain)
}

// DeleteIfExists mocks base method.
func (m *MockIPTablesWrapper) DeleteIfExists(table, chain string, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{table, chain}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIfExists", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIfExists indicates an expected call of DeleteIfExists.
func (mr *MockIPTablesWrapperMockRecorder) DeleteIfExists(table, chain any, rulespec ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{table, chain}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIfExists", reflect.TypeOf((*MockIPTablesWrapper)(nil).DeleteIfExists), varargs...)
}

// InsertUnique mocks base method.
func (m *MockIPTablesWrapper) InsertUnique(table, chain string, pos int, rulespec ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{table, chain, pos}
	for _, a := range rulespec {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertUnique", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUnique indicates an expected call of InsertUnique.
func (mr *MockIPTablesWrapperMockRecorder) InsertUnique(table, chain, pos any, rulespec ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{table, chain, pos}, rulespec...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUnique", reflect.TypeOf((*MockIPTablesWrapper)(nil).InsertUnique), varargs...)
}

// NewChain mocks base method.
func (m *MockIPTablesWrapper) NewChain(table, chain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChain indicates an expected call of NewChain.
func (mr *MockIPTablesWrapperMockRecorder) NewChain(table, chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChain", reflect.TypeOf((*MockIPTablesWrapper)(nil).NewChain), table, chain)
}
