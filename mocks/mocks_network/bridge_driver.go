// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/internal/service/network (interfaces: BridgeDriverOperations)

// Package mocks_network is a generated GoMock package.
package mocks_network

import (
	reflect "reflect"

	netutil "github.com/containerd/nerdctl/pkg/netutil"
	gomock "github.com/golang/mock/gomock"
	types "github.com/runfinch/finch-daemon/api/types"
)

// BridgeDriver is a mock of BridgeDriverOperations interface.
type BridgeDriver struct {
	ctrl     *gomock.Controller
	recorder *BridgeDriverMockRecorder
}

// BridgeDriverMockRecorder is the mock recorder for BridgeDriver.
type BridgeDriverMockRecorder struct {
	mock *BridgeDriver
}

// NewBridgeDriver creates a new mock instance.
func NewBridgeDriver(ctrl *gomock.Controller) *BridgeDriver {
	mock := &BridgeDriver{ctrl: ctrl}
	mock.recorder = &BridgeDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BridgeDriver) EXPECT() *BridgeDriverMockRecorder {
	return m.recorder
}

// DisableICC mocks base method.
func (m *BridgeDriver) DisableICC(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableICC", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableICC indicates an expected call of DisableICC.
func (mr *BridgeDriverMockRecorder) DisableICC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableICC", reflect.TypeOf((*BridgeDriver)(nil).DisableICC), arg0, arg1)
}

// GetBridgeName mocks base method.
func (m *BridgeDriver) GetBridgeName(arg0 *netutil.NetworkConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBridgeName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBridgeName indicates an expected call of GetBridgeName.
func (mr *BridgeDriverMockRecorder) GetBridgeName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBridgeName", reflect.TypeOf((*BridgeDriver)(nil).GetBridgeName), arg0)
}

// GetNetworkByBridgeName mocks base method.
func (m *BridgeDriver) GetNetworkByBridgeName(arg0 string) (*netutil.NetworkConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByBridgeName", arg0)
	ret0, _ := ret[0].(*netutil.NetworkConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByBridgeName indicates an expected call of GetNetworkByBridgeName.
func (mr *BridgeDriverMockRecorder) GetNetworkByBridgeName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByBridgeName", reflect.TypeOf((*BridgeDriver)(nil).GetNetworkByBridgeName), arg0)
}

// HandleCreateOptions mocks base method.
func (m *BridgeDriver) HandleCreateOptions(arg0 types.NetworkCreateRequest, arg1 netutil.CreateOptions) (netutil.CreateOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateOptions", arg0, arg1)
	ret0, _ := ret[0].(netutil.CreateOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCreateOptions indicates an expected call of HandleCreateOptions.
func (mr *BridgeDriverMockRecorder) HandleCreateOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateOptions", reflect.TypeOf((*BridgeDriver)(nil).HandleCreateOptions), arg0, arg1)
}

// HandlePostCreate mocks base method.
func (m *BridgeDriver) HandlePostCreate(arg0 *netutil.NetworkConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePostCreate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePostCreate indicates an expected call of HandlePostCreate.
func (mr *BridgeDriverMockRecorder) HandlePostCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePostCreate", reflect.TypeOf((*BridgeDriver)(nil).HandlePostCreate), arg0)
}

// ICCDisabled mocks base method.
func (m *BridgeDriver) ICCDisabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ICCDisabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ICCDisabled indicates an expected call of ICCDisabled.
func (mr *BridgeDriverMockRecorder) ICCDisabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ICCDisabled", reflect.TypeOf((*BridgeDriver)(nil).ICCDisabled))
}

// SetBridgeName mocks base method.
func (m *BridgeDriver) SetBridgeName(arg0 *netutil.NetworkConfig, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBridgeName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBridgeName indicates an expected call of SetBridgeName.
func (mr *BridgeDriverMockRecorder) SetBridgeName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBridgeName", reflect.TypeOf((*BridgeDriver)(nil).SetBridgeName), arg0, arg1)
}

// SetICCDisabled mocks base method.
func (m *BridgeDriver) SetICCDisabled() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetICCDisabled")
}

// SetICCDisabled indicates an expected call of SetICCDisabled.
func (mr *BridgeDriverMockRecorder) SetICCDisabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetICCDisabled", reflect.TypeOf((*BridgeDriver)(nil).SetICCDisabled))
}
