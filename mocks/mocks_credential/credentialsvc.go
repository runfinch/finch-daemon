// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/api/handlers/credential (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --destination=../../../mocks/mocks_credential/credentialsvc.go -package=mocks_credential github.com/runfinch/finch-daemon/api/handlers/credential Service
//

// Package mocks_credential is a generated GoMock package.
package mocks_credential

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateBuildID mocks base method.
func (m *MockService) GenerateBuildID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBuildID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBuildID indicates an expected call of GenerateBuildID.
func (mr *MockServiceMockRecorder) GenerateBuildID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBuildID", reflect.TypeOf((*MockService)(nil).GenerateBuildID))
}

// GetCredentials mocks base method.
func (m *MockService) GetCredentials(ctx context.Context, buildID, serverAddr string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, buildID, serverAddr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockServiceMockRecorder) GetCredentials(ctx, buildID, serverAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockService)(nil).GetCredentials), ctx, buildID, serverAddr)
}

// RemoveCredentials mocks base method.
func (m *MockService) RemoveCredentials(ctx context.Context, buildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCredentials", ctx, buildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCredentials indicates an expected call of RemoveCredentials.
func (mr *MockServiceMockRecorder) RemoveCredentials(ctx, buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentials", reflect.TypeOf((*MockService)(nil).RemoveCredentials), ctx, buildID)
}

// RemoveCredentialsAfterBuild mocks base method.
func (m *MockService) RemoveCredentialsAfterBuild(buildID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveCredentialsAfterBuild", buildID)
}

// RemoveCredentialsAfterBuild indicates an expected call of RemoveCredentialsAfterBuild.
func (mr *MockServiceMockRecorder) RemoveCredentialsAfterBuild(buildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCredentialsAfterBuild", reflect.TypeOf((*MockService)(nil).RemoveCredentialsAfterBuild), buildID)
}

// Shutdown mocks base method.
func (m *MockService) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServiceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockService)(nil).Shutdown))
}

// StoreCredentials mocks base method.
func (m *MockService) StoreCredentials(ctx context.Context, buildID string, credentials map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredentials", ctx, buildID, credentials)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCredentials indicates an expected call of StoreCredentials.
func (mr *MockServiceMockRecorder) StoreCredentials(ctx, buildID, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredentials", reflect.TypeOf((*MockService)(nil).StoreCredentials), ctx, buildID, credentials)
}
