// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/api/handlers/image (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --destination=../../../mocks/mocks_image/imagesvc.go -package=mocks_image github.com/runfinch/finch-daemon/api/handlers/image Service
//

// Package mocks_image is a generated GoMock package.
package mocks_image

import (
	context "context"
	io "io"
	reflect "reflect"

	dockercompat "github.com/containerd/nerdctl/v2/pkg/inspecttypes/dockercompat"
	types "github.com/docker/cli/cli/config/types"
	types0 "github.com/runfinch/finch-daemon/api/types"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Inspect mocks base method.
func (m *MockService) Inspect(ctx context.Context, name string) (*dockercompat.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, name)
	ret0, _ := ret[0].(*dockercompat.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockServiceMockRecorder) Inspect(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockService)(nil).Inspect), ctx, name)
}

// List mocks base method.
func (m *MockService) List(ctx context.Context) ([]types0.ImageSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]types0.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx)
}

// Load mocks base method.
func (m *MockService) Load(ctx context.Context, inStream io.Reader, outStream io.Writer, quiet bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, inStream, outStream, quiet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockServiceMockRecorder) Load(ctx, inStream, outStream, quiet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockService)(nil).Load), ctx, inStream, outStream, quiet)
}

// Pull mocks base method.
func (m *MockService) Pull(ctx context.Context, name, tag, platform string, authCfg *types.AuthConfig, outStream io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", ctx, name, tag, platform, authCfg, outStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull.
func (mr *MockServiceMockRecorder) Pull(ctx, name, tag, platform, authCfg, outStream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockService)(nil).Pull), ctx, name, tag, platform, authCfg, outStream)
}

// Push mocks base method.
func (m *MockService) Push(ctx context.Context, name, tag string, authCfg *types.AuthConfig, outStream io.Writer) (*types0.PushResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, name, tag, authCfg, outStream)
	ret0, _ := ret[0].(*types0.PushResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockServiceMockRecorder) Push(ctx, name, tag, authCfg, outStream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockService)(nil).Push), ctx, name, tag, authCfg, outStream)
}

// Remove mocks base method.
func (m *MockService) Remove(ctx context.Context, name string, force bool) ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, name, force)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Remove indicates an expected call of Remove.
func (mr *MockServiceMockRecorder) Remove(ctx, name, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockService)(nil).Remove), ctx, name, force)
}

// Tag mocks base method.
func (m *MockService) Tag(ctx context.Context, srcImg, repo, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", ctx, srcImg, repo, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockServiceMockRecorder) Tag(ctx, srcImg, repo, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockService)(nil).Tag), ctx, srcImg, repo, tag)
}
