// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch-daemon/pkg/ecc (interfaces: ExecCmdCreator)
//
// Generated by this command:
//
//	mockgen --destination=../../mocks/mocks_ecc/execcmdcreator.go -package=mocks_ecc github.com/runfinch/finch-daemon/pkg/ecc ExecCmdCreator
//

// Package mocks_ecc is a generated GoMock package.
package mocks_ecc

import (
	reflect "reflect"

	ecc "github.com/runfinch/finch-daemon/pkg/ecc"
	gomock "go.uber.org/mock/gomock"
)

// MockExecCmdCreator is a mock of ExecCmdCreator interface.
type MockExecCmdCreator struct {
	ctrl     *gomock.Controller
	recorder *MockExecCmdCreatorMockRecorder
	isgomock struct{}
}

// MockExecCmdCreatorMockRecorder is the mock recorder for MockExecCmdCreator.
type MockExecCmdCreatorMockRecorder struct {
	mock *MockExecCmdCreator
}

// NewMockExecCmdCreator creates a new mock instance.
func NewMockExecCmdCreator(ctrl *gomock.Controller) *MockExecCmdCreator {
	mock := &MockExecCmdCreator{ctrl: ctrl}
	mock.recorder = &MockExecCmdCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecCmdCreator) EXPECT() *MockExecCmdCreatorMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockExecCmdCreator) Command(name string, args ...string) ecc.ExecCmd {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(ecc.ExecCmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockExecCmdCreatorMockRecorder) Command(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockExecCmdCreator)(nil).Command), varargs...)
}
